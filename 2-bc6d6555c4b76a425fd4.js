(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{153:function(a,n,s){"use strict";var t=s(162),e=s(0),o=s.n(e),p=s(4),l=s.n(p),i=s(163),c=s.n(i),u=s(171),k=s.n(u);function r(a){var n=a.description,s=a.lang,e=a.meta,p=a.keywords,l=a.title,i=t.data.site,u=n||i.siteMetadata.description;return o.a.createElement(c.a,{htmlAttributes:{lang:s},title:l,titleTemplate:"%s | "+i.siteMetadata.title,meta:[{name:"description",content:u},{property:"og:title",content:l},{property:"og:description",content:u},{property:"og:type",content:"website"},{name:"twitter:card",content:"summary"},{name:"twitter:creator",content:i.siteMetadata.author},{name:"twitter:title",content:l},{name:"twitter:description",content:u}].concat(p.length>0?{name:"keywords",content:p.join(", ")}:[]).concat(e),link:[{rel:"icon",type:"image/png",sizes:"16x16",href:""+k.a}]})}r.defaultProps={lang:"en",meta:[],keywords:[],description:""},r.propTypes={description:l.a.string,lang:l.a.string,meta:l.a.arrayOf(l.a.object),keywords:l.a.arrayOf(l.a.string),title:l.a.string.isRequired},n.a=r},155:function(a,n,s){"use strict";var t=s(159),e=s(0),o=s.n(e),p=s(4),l=s.n(p),i=s(33),c=s.n(i),u=(s(156),o.a.createContext({})),k=function(a){return o.a.createElement(u.Consumer,null,function(n){return a.data||n[a.query]&&n[a.query].data?(a.render||a.children)(a.data?a.data.data:n[a.query].data):o.a.createElement("div",null,"Loading (StaticQuery)")})};k.propTypes={data:l.a.object,query:l.a.string.isRequired,render:l.a.func,children:l.a.func};var r=s(161),m=s.n(r),d=s(157),g=s.n(d),v=s(172),h=function(a){var n=a.shrink,s=a.isOpen,t=a.toggleMenu,e=a.isMobile;return o.a.createElement("div",null,o.a.createElement("header",{className:n?"shrink-header":""},o.a.createElement("div",{className:"cettugether-wrapper "+(n?"shrink-button":"")},o.a.createElement(m.a,null),o.a.createElement(g.a,null)),e&&o.a.createElement("div",{className:"button-container"},o.a.createElement("button",{"aria-label":"menu-button",className:"menu-button "+(s?"open":""),onClick:function(){return t(!s)}},o.a.createElement(v.a,null)))))};h.propTypes={shrink:l.a.bool,toggleMenu:l.a.func,isMobile:l.a.bool,isOpen:l.a.bool};var y=h,j=function(){return o.a.createElement("footer",null,o.a.createElement("div",{className:"code-wrapper "},o.a.createElement(g.a,null)),o.a.createElement("div",{className:"flex-column address"},o.a.createElement("span",null,"+358 40 729 2733"),o.a.createElement("span",null,"Vuorikatu 14 A"),o.a.createElement("span",null,"00100 Helsinki")),o.a.createElement("div",{className:"flex-column links"},o.a.createElement("a",{className:"footer-link",href:"https://codento.fi/privacy-policy/"},"Tietosuojak√§yt√§nn√∂t"),o.a.createElement("a",{className:"footer-link",href:"https://codento.fi/teeta-ohjelmisto/"},"Teet√§ ohjelmisto"),o.a.createElement("a",{className:"footer-link",href:"https://codento.fi/paranna-tyotapasi/"},"Paranna ty√∂tapaasi"),o.a.createElement("a",{className:"footer-link",href:"https://codento.fi/tehosta-it-arkkitehtuuriasi/"},"IT-arkkitehtuurit"),o.a.createElement("a",{className:"footer-link",href:"https://www2.codento.fi/blogi"},"Blogi"),o.a.createElement("a",{className:"footer-link",href:"https://codento.fi/rekry"},"Avoimet ty√∂paikat")))},b=(s(149),function(a){var n=a.data,s=a.isOpen;a.isMobile;return o.a.createElement("div",{className:(s?"open":"closed")+" sidebar"},o.a.createElement("nav",null,o.a.createElement("ul",{className:"menu"},o.a.createElement("li",null,o.a.createElement(c.a,{to:"/"},"Index")),n.map(function(a){return o.a.createElement("li",{key:a.node.frontmatter.title},o.a.createElement(c.a,{to:a.node.fields.slug},a.node.frontmatter.title))}))))}),f=function(){var a={height:"undefined"!=typeof window?window.innerHeight:900,width:"undefined"!=typeof window?window.innerWidth:900},n=Object(e.useState)({windowHeight:a.height,windowWidth:a.width}),s=n[0],t=n[1];return Object(e.useEffect)(function(){var a=function(){return t({windowHeight:window.innerHeight,windowWidth:window.innerWidth})};return window.addEventListener("resize",a),function(){return window.removeEventListener("resize",a)}},[]),s},x=function(a){var n=a.children,s=f(),p=Object(e.useState)(!1),l=p[0],i=p[1],c=Object(e.useState)(s.windowWidth<500)[0],u=Object(e.useState)(!c),r=u[0],m=u[1];function d(){var a=document.documentElement.scrollTop>25;i(a)}return Object(e.useEffect)(function(){return window.addEventListener("scroll",d),function(){return window.removeEventListener("scroll",d)}},[]),o.a.createElement(k,{query:"401730904",render:function(a){return o.a.createElement("div",null,o.a.createElement(y,{shrink:l,isOpen:r,toggleMenu:m,isMobile:c}),o.a.createElement("div",{className:"container"},o.a.createElement(b,{data:a.allMarkdownRemark.edges,isOpen:r,isMobile:c}),(!c||c&&!r)&&o.a.createElement("div",{className:"content "+(c?"mobile":"")},o.a.createElement("main",null,n))),(!c||c&&!r)&&o.a.createElement(j,null))},data:t})};x.propTypes={children:l.a.node.isRequired};n.a=x},156:function(a,n,s){var t;a.exports=(t=s(160))&&t.default||t},157:function(a,n,s){var t=s(0);function e(a){return t.createElement("svg",a,t.createElement("g",null,[t.createElement("path",{fill:"#FF8300",d:"M89.532,136.904v-18.335c0-2.27-1.135-3.786-3.593-3.786h-0.566c-7.184,0.571-17.581,1.516-27.977,1.516\n\t\tc-13.045,0-23.443-6.805-23.443-31.943v-23.82c0-25.143,10.398-31.948,23.443-31.948c10.396,0,20.793,0.944,27.977,1.512h0.566\n\t\tc2.458,0,3.593-1.512,3.593-3.781V7.985c0-2.647-1.516-3.404-4.159-4.161c-3.971-1.321-14.936-3.213-28.168-3.213\n\t\tc-28.731,0-55.95,14.935-55.95,59.926v23.82c0,44.985,27.22,60.108,55.95,60.108c13.233,0,24.197-1.889,28.168-3.215\n\t\tC88.016,140.495,89.532,139.551,89.532,136.904",key:0}),t.createElement("path",{fill:"#FF8300",d:"M221.068,83.222V60.729c0-43.859-27.434-60.682-58.62-60.682c-31.193,0-58.628,16.822-58.628,60.682v22.493\n\t\tc0,43.855,27.435,60.679,58.628,60.679C193.634,143.9,221.068,127.077,221.068,83.222 M188.558,83.222\n\t\tc0,22.686-10.233,32.324-26.11,32.324c-15.88,0-25.922-9.638-25.922-32.324V60.729c0-22.684,10.042-32.327,25.922-32.327\n\t\tc15.877,0,26.11,9.643,26.11,32.327V83.222z",key:1}),t.createElement("path",{fill:"#FF8300",d:"M351.412,84.73V60.348c0-39.885-22.691-59.737-60.305-59.737c-15.69,0-32.512,1.512-40.264,2.836\n\t\tc-3.59,0.569-5.486,2.265-5.486,6.619v124.949c0,4.344,1.896,6.048,5.486,6.616c7.753,1.32,24.575,2.832,40.264,2.832\n\t\tC328.721,144.464,351.412,124.617,351.412,84.73 M319.085,84.73c0,25.518-10.964,32.327-27.978,32.327\n\t\tc-4.725,0-10.772-0.19-13.421-0.383V28.398c2.648-0.186,8.696-0.377,13.421-0.377c17.014,0,27.978,6.807,27.978,32.327V84.73z",key:2}),t.createElement("path",{fill:"#FF8300",d:"M461.529,138.039v-17.581c0-2.078-1.705-3.78-3.778-3.78h-38.378c-8.886,0-12.096-3.027-12.096-12.851\n\t\tv-20.04h48.959c2.081,0,3.776-1.703,3.776-3.783V62.05c0-2.082-1.695-3.786-3.776-3.786h-48.959V41.067\n\t\tc0-9.832,3.21-12.857,12.096-12.857h38.378c2.073,0,3.778-1.702,3.778-3.781V6.85c0-2.458-1.136-3.402-3.778-3.78\n\t\tc-6.622-0.943-16.072-2.459-36.488-2.459c-24.386,0-46.122,6.05-46.122,40.456v62.76c0,34.399,21.552,40.637,45.932,40.637\n\t\tc20.421,0,30.057-1.512,36.679-2.454C460.393,141.626,461.529,140.494,461.529,138.039",key:3}),t.createElement("path",{fill:"#FF8300",d:"M520.32,4.354l-3.767,92.67c0,1.005-0.376,1.915-1.13,2.73c-0.751,0.818-1.632,1.223-2.635,1.223h-16.905\n\t\tc-1.007,0-1.948-0.405-2.825-1.223c-0.88-0.815-1.318-1.725-1.318-2.73l-3.767-92.67V4.166c0-1.003,0.439-1.85,1.319-2.542\n\t\tc0.877-0.689,1.817-1.036,2.824-1.036h24.436c1.005,0,1.883,0.347,2.637,1.036c0.753,0.691,1.13,1.539,1.13,2.542V4.354z",key:4}),t.createElement("path",{fill:"#FF8300",d:"M518.795,143.39c-0.693,0.753-1.539,1.13-2.542,1.13h-24.001c-1.007,0-1.883-0.376-2.637-1.13\n\t\tc-0.752-0.753-1.129-1.63-1.129-2.636v-23.223c0-1.003,0.378-1.85,1.129-2.542c0.754-0.688,1.63-1.035,2.637-1.035h24.001\n\t\tc2.382,0,3.577,1.194,3.577,3.577v23.223C519.83,141.76,519.484,142.637,518.795,143.39",key:5})]))}e.defaultProps={version:"1.1",id:"Layer_1",x:"0px",y:"0px",viewBox:"0 0 521.575 144.567",enableBackground:"new 0 0 521.575 144.567",xmlSpace:"preserve"},a.exports=e,e.default=e},159:function(a){a.exports={data:{allMarkdownRemark:{edges:[{node:{fields:{slug:"/web-kertaus/"},frontmatter:{title:"Web-kertaus"},html:'<h2>HTML</h2>\n<p>HTML on ns. merkint√§kieli, joka koostuu elementeist√§ joilla on tyypillisesti alku- ja lopput√§gi:</p>\n<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">&lt;elementti&gt;\n  &lt;toinenElementti /&gt;\n&lt;/elementti&gt;</code></pre></div>\n<p>Elementeill√§ voi olla toisia elementtej√§ tai merkkijonoja (teksti√§) sis√§lt√∂n√§√§n.  Sis√§ll√∂t√∂n elementti voidaan sulkea ilman lopput√§gi√§.  HTML:ll√§ m√§√§ritell√§√§n rakenteisia dokumentteja, eli dokumentteja joita voidaan lukea ohjelmallisesti.</p>\n<p>HTML-elementeill√§ voi olla my√∂s attribuutteja eli lis√§tietokentti√§ elementtiin liittyen.  Esimerkiksi CSS-tyylit usein l√∂yt√§v√§t muotoiltavat elementit juuri attribuuttien avulla.</p>\n<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">&lt;elementti class=&quot;asiallinen&quot;&gt;\n  Olen asiallinen elementti\n&lt;/elementti&gt;\n&lt;elementti class=&quot;hassuttelu&quot;&gt;\n  ü§°\n&lt;/elementti&gt;</code></pre></div>\n<p>Harjoituksessamme tarvitsemme ainakin seuraavia HTML-kielen vakioelementtej√§:</p>\n<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">&lt;div class=&quot;&quot;&gt;\n  &lt;p&gt; Div on sivua j√§sent√§v√§ semantiikaton osio.  Tekstikappaletta tarkoittava p tulee englannin sanasta paragraph.&lt;/p&gt;\n  &lt;a href=&quot;https://rekkurescue.com&quot;&gt;T√§m√§ on linkki&lt;/a&gt;\n  &lt;img src=&quot;http://www.kodinvaihtajat.com/wp-content/uploads/2015/06/Noppa3.jpg&quot; alt=&quot;Kuva kissasta laatikossa&quot; /&gt;\n&lt;/div&gt;</code></pre></div>\n<p>React k√§ytt√§√§ HTML:n syntaksia tuottaakseen selaimen ymm√§rt√§mi√§ HTML-dokumentteja.</p>\n<h2>CSS</h2>\n<p>CSS, joka on akronyymi sanoista <strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets, on s√§√§nt√∂j√§, joilla voidaan m√§√§ritell√§ esimerkiksi webbisivun tyylej√§. Sen avulla voidaan muokata sivun fontteja, v√§rej√§ ja asettelua, mutta my√∂s paljon muuta. Emme k√§y t√§ll√§ kurssilla tarkemmin CSS√§√§ l√§vitse, vaan keskitymme Reactin opetteluun, ja tyylej√§ tarvittaessa annamme ne valmiiksi. Jos haluat tutustua l√§hemmin CSSn, esimerkiksi <a href="https://learn.freecodecamp.org/responsive-web-design/basic-css">Free Code Camp tarjoaa kurssin CSSn perusteista.</a></p>\n<h2>JavaScript</h2>\n<p>Javascript on ohjelmointikieli, jota webbiselaimet suorittavat.  Sit√§ k√§ytet√§√§n sivuilla, joille halutaan dynaamisia sis√§lt√∂j√§ ‚Äî joka nyky√§√§n tarkoittaa melkeinp√§ kaikkia sivuja.</p>\n<h3>Asioiden nime√§minen</h3>\n<p>Voimme nimet√§ erilaisia asioita, kuten merkkijonoja, lukuja tai tietorakenteita, kuten listoja, my√∂hemp√§√§ viittaamista varten k√§ytt√§m√§ll√§ ilmaisua const, joka on lyhennys sanasta constant.</p>\n<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> merkkijono <span class="token operator">=</span> <span class="token string">"Hello world!"</span>\n<span class="token keyword">const</span> vastausKaikkeen <span class="token operator">=</span> <span class="token number">42</span>\n<span class="token keyword">const</span> listaNumeroita <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> vastausKaikkeen<span class="token punctuation">]</span></code></pre></div>\n<p>Voimme viitata listan j√§seniin indeksill√§.</p>\n<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">listaNumeroita<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 1</span>\nlistaNumeroita<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">// 42</span></code></pre></div>\n<p>Huomaa ett√§ ensimm√§iseen j√§seniin viitataan numerolla 0!  (Kaksi kauttaviivaa // on yksi javascriptin tavoista merkit√§ kommenttia.  Kommentti on teksti√§, jonka ohjelmointikielen k√§√§nt√§j√§ tai tulkki j√§tt√§√§ t√§ysin huomiotta, eli kommentit ovat vain muistiinpanoja tai selvennyksi√§.  T√§ss√§ kommenttina on se, mit√§ kyseinen ilmaus tai lauseke palauttaa, eli miten k√§√§nt√§j√§ tai tulkki tulkitsee sen.)</p>\n<p>Lista voi olla my√∂s tyhj√§.  Tyhj√§√§ listaa merkit√§√§n pelkill√§ hakasulkeilla: </p>\n<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> tyhjaLista <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre></div>\n<h3>Objektit</h3>\n<p>Yksi eritt√§in hy√∂dyllinen tietotyyppi on objekti.  Objekti on kokoelma avaimia joilla on jonkinlainen arvo. Voimme esimerkiksi m√§√§ritell√§ (ja nimet√§ const:ia k√§ytt√§en) objektin seuraavasti:</p>\n<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> kissa <span class="token operator">=</span> <span class="token punctuation">{</span>‚Äúnimi‚Äù<span class="token punctuation">:</span> ‚ÄúNoppa‚Äù<span class="token punctuation">,</span> ‚Äúik√§‚Äù<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> ‚Äúrotu‚Äù<span class="token punctuation">:</span> ‚Äùabessinialainen‚Äù<span class="token punctuation">}</span></code></pre></div>\n<p>T√§m√§n j√§lkeen voimme viitata objektin avaimiin suoraan, esimerkiksi:</p>\n<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">kissa<span class="token punctuation">.</span>nimi <span class="token comment">// "Noppa"</span>\nkissa<span class="token punctuation">.</span>ik√§ <span class="token comment">// 5</span></code></pre></div>\n<p>Objektit ovat <em>melkein</em> sama asia kuin my√∂hemmin tutuksi tuleva JSON, joka on keskeinen web-sovellusten v√§lisen tiedonvaihdon formaatti.  Jos tunnet jo objektit k√§sitteen√§ esimerkiksi Javasta tai jostain muusta olio-ohjelmointikielest√§, kannattanee javascriptin objekteja ajatella eri asiana, vaikka niiss√§ jotain samaakin on.</p>\n<p>Objektikin voi olla tyhj√§:</p>\n<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> tyhjaObjekti <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></div>\n<h3>Funktiot</h3>\n<p>Funktiot ovat uudelleenk√§ytett√§v√§√§ toiminallisuutta.  Funktiot ottavat sis√§√§n argumentteja tai parametreja sy√∂tteen√§√§n ja palauttavat jotain.  Funktioille annetaan sulkeiden sis√§lle merkityt asiat, ja se toteuttaa kaiken kaarisulkeiden sis√§√§n merkityn, palauttaen sen mit√§ return kuvaa funktion palauttavan.  Alla funktio, joka ottaa kaksi asiaa, a:n ja b:n, ja palauttaa niiden summan.</p>\n<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">omaSummaFunktio</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token punctuation">}</span>\n<span class="token function">omaSummaFunktio</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span></code></pre></div>\n<p>Funktiot ovat l√§ht√∂kohtaisesti hyvin yksinkertaisia, mutta niill√§ voi yksin√§√§n tehd√§ mit√§ tahansa mik√§ on tietokoneella teht√§viss√§!</p>\n<h3>Vertailu</h3>\n<p>Ohjelmoinnissa on usein verrattoman hy√∂dyllist√§ vertailla asioita kesken√§√§n.  Vertailu palauttaa George Boolen mukaan nimetyn boolean -tyypin ‚Äì joko true tai false.</p>\n<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">2</span> <span class="token comment">// false</span>\n<span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">3</span> <span class="token comment">// true</span>\n<span class="token boolean">false</span> <span class="token operator">===</span> <span class="token operator">!</span><span class="token boolean">true</span> <span class="token comment">// true</span>\n<span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token comment">// true</span>\n<span class="token number">2</span> <span class="token operator">>=</span> <span class="token number">2</span> <span class="token comment">// true</span>\n<span class="token number">5</span> <span class="token operator">>=</span> <span class="token number">3</span> <span class="token comment">// false</span></code></pre></div>\n<p>Voimme my√∂s esitt√§√§ ehdollisia lauseita ohjelmoidessa, esimerkiksi sanoen: </p>\n<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">tarkistaLista</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">lista</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>lista<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Tyhj√§!"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Taulukossa on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lista<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> asiaa!`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>\n<p>Eli jos on totta, ett√§ lista -niminen lista on tyhj√§, tulostetaan selaimen konsoliin ilmoitus tyhjyydest√§.  Muutoin tulostetaan nk. template literal, eli erityinen merkkijono johon voidaan helposti liitt√§√§ ohjelmallisesti tuotettuja katkelmia.  </p>\n<h3>Destrukturointi</h3>\n<p>On usein k√§yt√§nn√∂llist√§ purkaa listoja osiin tai napata objektista k√§ytt√∂√∂n vain tietyt avaimet.  Listojen osalta t√§m√§ onnistuu esimerkiksi seuraavasti:</p>\n<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> luvut <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"yksi"</span><span class="token punctuation">,</span> <span class="token string">"kaksi"</span><span class="token punctuation">,</span> <span class="token string">"kolme"</span><span class="token punctuation">,</span> <span class="token string">"nelj√§"</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>yksi<span class="token punctuation">,</span> kaksi<span class="token punctuation">,</span> kolme<span class="token punctuation">]</span> <span class="token operator">=</span> luvut\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>yksi<span class="token punctuation">)</span> <span class="token comment">// "yksi"</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nelj√§<span class="token punctuation">)</span> <span class="token comment">// undefined</span></code></pre></div>\n<p>Objektien kanssa destrukturointia k√§ytet√§√§n Reactissa paljon.</p>\n<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> kissa <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"nimi"</span><span class="token punctuation">:</span> <span class="token string">"Noppa"</span><span class="token punctuation">,</span> <span class="token string">"rotu"</span><span class="token punctuation">:</span> <span class="token string">"abessinialainen"</span><span class="token punctuation">,</span> <span class="token string">"ik√§"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"ominaisuudet"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"hieno"</span><span class="token punctuation">,</span> <span class="token string">"kaunis"</span><span class="token punctuation">,</span> <span class="token string">"√§lyk√§s"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> nimi <span class="token punctuation">}</span> <span class="token operator">=</span> kissa\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nimi<span class="token punctuation">)</span> <span class="token comment">// "Noppa"</span></code></pre></div>\n<p><a href="https://codento.github.io/react-workshop-2/react/">Sukelletaan seuraavaksi Reactiin</a></p>'}},{node:{fields:{slug:"/react/"},frontmatter:{title:"React"},html:'<h2>Mik√§ on React.js</h2>\n<p>React.js on yksi maailman suosituimmista ty√∂kaluista modernien web-k√§ytt√∂liittymien kehitt√§miseen. React on ns. JavaScript-kirjasto, eli kokoelma ty√∂kaluja, jotka helpottavat selainpohjaisten sovellusten kehitt√§mist√§.\n<br>\nReactin suosioon on edesauttanut sen komponenttipohjainen l√§hestymistapa, jolla monimutkaisetkin web-palvelut voidaan rakentaa yksinkertaisemmista palasista. React-sovellusta kannattaakin ajatella er√§√§nlaisena Lego-linnana, jota rakennetaan pieni pala kerrallaan.</p>\n<p>React sis√§lt√§√§ my√∂s erilaisia ty√∂kaluja tilanhallintaa varten. Jokaisella React-komponentilla on oma sis√§inen tilansa, jonka muuttuessa sivulla n√§ytett√§v√§ tieto p√§ivittyy automaattisesti ilman sivun uudelleenlatausta, jolloin sivustosta tulee ns. dynaaminen.</p>\n<p>Alkujaan React on Facebookin omaan k√§ytt√∂√∂ns√§ kehitt√§m√§, mutta se julkaistiin kaikkien k√§ytett√§v√§ksi vuonna 2013.  Nyky√§√§n Reactin ymp√§rille on kehittynyt laaja kirjo lis√§osia ja oppimateriaalia, joka on toistaiseksi sementoinut Reactin aseman alati muuttuvassa web-devauksen maailmassa.</p>\n<h2>Alkuaskeleet</h2>\n<p>Miten Reactin kanssa sitten oikein p√§√§see alkuun? Uuden React-sovelluksen voi aloittaa joko t√§ysin tyhj√§st√§, tai k√§ytt√§√§ valmista pohjaa. Tyhj√§st√§ aloittaminen antaa paremmat valmiudet hallita sovelluksen jokaista yksityiskohtaa, ja ymm√§rryksen syvent√§miseksi on kenties suositeltavaa kokeilla pystytt√§√§ pieni sovellus alusta alkaen itse sitten kun React alkaa olla tuttu. Useimmiten on kuitenkin perusteltua k√§ytt√§√§ valmista pohjaa, esimerkiksi <em>create-react-app</em>:in avulla.</p>\n<h3>create-react-app</h3>\n<p><em>create-react-app</em> on ohjelma, joka luo standardipohjan React-sovellusten kehitykseen. Se luo uuden hakemiston, asentaa Reactin v√§ltt√§m√§tt√∂m√§t riippuvuudet ja luo esimerkkisovelluksen, jonka voi k√§ynnist√§√§ heti. <em>create-react-app</em>:iin viitataan usein kirjainyhdistelm√§ll√§ <em>CRA</em>. <em>CRA</em>:ta k√§ytet√§√§n usein my√∂s oikeissa asiakasprojekteissa.</p>\n<h3>Ensimm√§inen sovellus</h3>\n<p>Luo uusi React-sovellus <em>CRA</em>:n avulla. Avaa komentorivi, ja anna komento:</p>\n<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">npx create-react-app karvakuonot</code></pre></div>\n<blockquote>\n<p>Komennon viimeinen osa <em>karvakuonot</em> on luotavan sovelluksen nimi; voit itse p√§√§tt√§√§ mik√§ sovelluksesi nimi on, mutta jos muutat sen, muista korvata <em>karvakuonot</em> p√§√§tt√§m√§ll√§si nimell√§ my√∂s my√∂hemmin materiaalissa.</p>\n</blockquote>\n<p>Komennon suoritus kest√§√§ hetken, kun React ladataan ja sovellus alustetaan. Kun komento on valmis, siirry komentorivill√§ sovelluksen hakemistoon <code class="language-text">karvakuonot</code> komennolla:</p>\n<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">cd</span> karvakuonot</code></pre></div>\n<p>Joissakin CRA:n versioissa projektihakemistoon luodaan automaattisesti tiedosto <code class="language-text">yarn.lock</code>. <code class="language-text">yarn</code> ja <code class="language-text">npm</code> ovat ns. paketinhallintaty√∂kaluja, joilla projekteihin asennetaan erilaisia kirjastoja. K√§ytet√§√§n t√§ll√§ kertaa <code class="language-text">npm</code>:√§√§, koska se tulee Node.js:√§n mukana valmiina. N√§in ollen, mik√§li hakemistossasi on tiedosto <code class="language-text">yarn.lock</code>, niin poista se v√§ltt√§√§ksesi mahdolliset konfliktit eri paketinhallintaty√∂kalujen v√§lill√§.</p>\n<p>Viimeiseksi viel√§ ennen sovelluksen k√§ynnist√§mist√§ asennetaan projektin tarvitsemat kirjastot komennolla ajamalla terminaalissa</p>\n<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span></code></pre></div>\n<p>T√§t√§ komentoa ei tarvitse kirjoittaa jokaisella k√§ynnistyskerralla. Vain silloin, jos projektiin on lis√§tty ulkoisia kirjastoja lis√§√§. Komento lis√§√§ automaattisesti tiedoston <code class="language-text">package-lock.json</code>, jota ei tarvitse poistaa.</p>\n<p>Nyt voimme k√§ynnist√§√§ sovelluksen komennolla</p>\n<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> start</code></pre></div>\n<p>Komento k√§ynnist√§√§ sovelluksen, ja hetken kuluttua sovelluksen voi avata osoitteessa <a href="http://localhost:3000">http://localhost:3000</a> (huom: selain saattaa my√∂s avata sivun automaattisesti komennon yhteydess√§).</p>\n<p>Sammuta sovellus komentorivilt√§ painamalla Ctrl-C n√§pp√§inyhdistelm√§√§ (Macilla paina Cmd-C).</p>\n<h3>Sovelluspohja</h3>\n<p>CRA:n luoma sovelluspohja sis√§lt√§√§ muutamia tiedostoja ja hakemistoja. Emme k√§sittele t√§ss√§ yhteydess√§ tiedostoja <code class="language-text">README.md</code>, <code class="language-text">package.json</code>, tai <code class="language-text">yarn.lock</code>. My√∂s <code class="language-text">node_modules</code>-hakemiston voi j√§tt√§√§ huomiotta t√§ss√§ vaiheessa.</p>\n<blockquote>\n<p>Mit√§ n√§m√§ tiedostot oikein ovat? <code class="language-text">package.json</code>, <code class="language-text">yarn.lock</code> ja <code class="language-text">node_modules</code> sis√§lt√§v√§t tietoa sovelluksen riippuvuuksista. <code class="language-text">README.md</code> on osa sovelluksesi dokumentaatiota, jonne voi vapaasti kirjoittaa esimerkiksi mik√§ sovellus on ja miten sen saa k√§ynnistetty√§.</p>\n</blockquote>\n<p>T√§rkeimm√§t tiedostot sovelluksen kannalta sijaitsevat <code class="language-text">public</code>- ja erityisesti <code class="language-text">src</code>-hakemistossa. <code class="language-text">public</code>-hakemisto sis√§lt√§√§ "perinteisen" HTML-sivun, jonka ainoa teht√§v√§ on k√§yt√§nn√∂ss√§ ladata sovellus selaimeen. <code class="language-text">src</code>-hakemisto sis√§lt√§√§ itse sovelluksen koodin. Tutustumme <code class="language-text">src</code>-hakemiston sis√§lt√∂√∂n tarkemmin seuraavaksi.</p>\n<h3>Sovelluspohjan siistiminen</h3>\n<p>Koska CRA pyrkii luomaan standardimallin React-sovelluksesta, se luo muutamia tiedostoja joita ei kurssilla k√§ytet√§ ja jotka selkeyden vuoksi voi yksinkertaisesti poistaa.</p>\n<p>Poista sovelluksen hakemistosta <code class="language-text">src/</code> tiedostot <code class="language-text">serviceWorker.js</code>, <code class="language-text">logo.svg</code> ja <code class="language-text">App.css</code>.</p>\n<blockquote>\n<p>Miksi n√§m√§ tiedostot poistetaan? Tiedostot <code class="language-text">logo.svg</code> ja <code class="language-text">App.css</code> liittyv√§t CRA:n luomaan esimerkkisovellukseen, eik√§ niille ole meid√§n sovelluksessa tarvetta. <code class="language-text">serviceWorker.js</code> on apuv√§line edistyneempien toiminnallisuuksien tarjoamiseen jota ei usein tarvita.</p>\n</blockquote>\n<p>Kun olet poistanut tiedostot, kokeile k√§ynnist√§√§ sovellus uudestaan komennolla <code class="language-text">npm start</code>. Huomaat, ett√§ sovellus ei en√§√§ toimikaan vaan selaimessa n√§kyy virhe <em>Failed to compile</em>. T√§m√§ johtuu siit√§, ett√§ React on melko tarkka virheiden suhteen, ja poistamalla tiedostoja jokin sovelluksessa on mennyt rikki.</p>\n<h3>Sovelluksen korjaaminen</h3>\n<p>Toistaiseksi sovellus ei toimi, sill√§ tiedostoja joita Reactin esimerkkisovellus haluaisi k√§ytt√§√§ on poistettu. Sovelluksen voi korjata muokkaamalla esimerkkisovellusta. Aloitamme siis koodauksen!</p>\n<p>Avaa hakemisto <code class="language-text">karvakuonot</code> valitsemaasi tekstieditoriin ja avaa sielt√§ tiedosto <code class="language-text">src/index.js</code>. Tiedosto n√§ytt√§√§ t√§lt√§:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./index.css\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> serviceWorker <span class="token keyword">from</span> <span class="token string">\'./serviceWorker\'</span><span class="token punctuation">;</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// If you want your app to work offline and load faster, you can change</span>\n<span class="token comment">// unregister() to register() below. Note this comes with some pitfalls.</span>\n<span class="token comment">// Learn more about service workers: https://bit.ly/CRA-PWA</span>\nserviceWorker<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>\n<p>Ensimm√§iset kaksi rivi√§ tuovat <code class="language-text">React</code>in ja <code class="language-text">ReactDOM</code>in tiedostoon, joita tarvitaan Reactia varten. Seuraava rivi tuo tyylitiedoston <code class="language-text">index.css</code>, jonka sis√§lt√∂ liitet√§√§n osaksi sovellusta. Seuraavaksi, rivill√§ 4, tuodaan <code class="language-text">App</code> tiedostosta <code class="language-text">&#39;./App&#39;</code>. Katsomme kohta mik√§ <code class="language-text">App</code> on, mutta t√§ss√§ vaiheessa riitt√§√§ tiet√§√§ ett√§ se on React-sovelluksemme juurikomponentti, eli aloituspiste sovellukselle.</p>\n<p>Rivill√§ 5 yritet√§√§n tuoda <code class="language-text">serviceWorker</code> tiedostosta <code class="language-text">&#39;./serviceWorker&#39;</code>, mutta kyseinen tiedosto on juuri poistettu. Tilanne korjantuu poistamalla rivi 5 kokonaan, sill√§ <code class="language-text">serviceWorker</code>iahan ei voi tuoda jos sit√§ ei ole olemassa. T√§m√§n lis√§ksi poistetaan viimeisen rivin <code class="language-text">serviceWorker.unregister();</code> ja kommenttirivit sit√§ ennen, samasta syyst√§ ett√§ <code class="language-text">serviceWorker</code>ia ei ole en√§√§ olemassa. Tiedosto n√§ytt√§√§ nyt siis t√§lt√§:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./index.css\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App\'</span><span class="token punctuation">;</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>\n<blockquote>\n<p><code class="language-text">ReactDOM.render</code> on Reactin tarjoama JavaScript-funktio, joka liitt√§√§ sovelluksen osaksi web-sivua. Se on v√§ltt√§m√§t√∂n osa React-sovellusta, mutta siit√§ riitt√§√§ tiet√§√§ ett√§ sen on oltava olemassa. T√§ss√§ tapauksessa React-komponentti <code class="language-text">App</code> liitet√§√§n HTML-elementtiin jolla on id <em>root</em>. T√§m√§ HTML-elementti l√∂ytyy tiedostosta <code class="language-text">public/index.html</code>.</p>\n</blockquote>\n<p>Avaa seuraavaksi tiedosto <code class="language-text">src/App.js</code> tekstieditoriin. Tiedosto n√§ytt√§√§ t√§lt√§:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">\'./logo.svg\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./App.css\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>header className<span class="token operator">=</span><span class="token string">"App-header"</span><span class="token operator">></span>\n          <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"App-logo"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span> <span class="token operator">/</span><span class="token operator">></span>\n          <span class="token operator">&lt;</span>p<span class="token operator">></span>\n            Edit <span class="token operator">&lt;</span>code<span class="token operator">></span>src<span class="token operator">/</span>App<span class="token punctuation">.</span>js<span class="token operator">&lt;</span><span class="token operator">/</span>code<span class="token operator">></span> and save to reload<span class="token punctuation">.</span>\n          <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n          <span class="token operator">&lt;</span>a\n            className<span class="token operator">=</span><span class="token string">"App-link"</span>\n            href<span class="token operator">=</span><span class="token string">"https://reactjs.org"</span>\n            target<span class="token operator">=</span><span class="token string">"_blank"</span>\n            rel<span class="token operator">=</span><span class="token string">"noopener noreferrer"</span>\n          <span class="token operator">></span>\n            Learn React\n          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre></div>\n<p>Tiedosto n√§ytt√§√§ alkuun melko vaikeaselkoiselta, mutta p√§√§osa tiedostosta on esimerkkisovelluksen sis√§lt√∂√∂n liittyv√§√§. React-komponenttien rakenne k√§yd√§√§n l√§pi vasta seuraavassa osiossa, joten t√§ss√§ vaiheessa vain muokkaa tiedosto n√§ytt√§m√§√§n t√§lt√§:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>\n        Hei maailma<span class="token operator">!</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre></div>\n<p>Poista siis rivit 9-22 kokonaisuudessaan, ja lis√§√§ j√§ljelle j√§√§neen <code class="language-text">&lt;div&gt;</code>-elementin sis√§lle teksti <em>Hei maailma!</em>. Koska aiemmin poistettiin tiedostot <code class="language-text">logo.svg</code>ja <code class="language-text">App.css</code>, niit√§ ei tarvitse tuoda komponenttiin joten poista my√∂s rivit 2 ja 3.</p>\n<p>Nyt komponentin rakenne on selke√§mpi. Ensimm√§isell√§ rivill√§ tuodaan <code class="language-text">React</code> ja <code class="language-text">Component</code> tiedoston k√§ytt√∂√∂n jotta ylip√§√§t√§√§n voidaan luoda React-komponentti. Tiedoston viimeisell√§ rivill√§ (<code class="language-text">export default App;</code>) App-komponentti annetaan muun sovelluksen k√§ytett√§v√§ksi. Ilman t√§t√§ rivi√§ App-komponenttia ei voisi k√§ytt√§√§ muualta sovelluksesta, eik√§ sovellus toimisi. Ensimm√§isen ja viimeisen rivin v√§liss√§ luodaan <code class="language-text">App</code>-komponentti ja tuodaan sen tarvitsemat riippuvuudet.</p>\n<p>Nyt sovellus taas toimii. Aikaisempi virhe oli se, ettei React l√∂yt√§nyt poistettuja tiedostoja, joita yritettiin tuoda <code class="language-text">App</code>-komponenttiin. Mik√§li sovellus on k√§ynniss√§, niin selainikkunasi pit√§isi p√§ivitty√§ automaattisesti ja n√§ytt√§√§ nyt pelk√§st√§√§n teksti <em>Hei maailma!</em> (muussa tapauksessa k√§ynnist√§ sovellus taas komennolla <code class="language-text">npm start</code>; voit j√§tt√§√§ sovelluksen p√§√§lle jolloin selain p√§ivittyy jatkossa automaattisesti kun teet muutoksia).</p>\n<p>Selaimessa pit√§isi n√§ky√§ vain teksti <em>Hei maailma!</em>:</p>\n<p><a\n    class="gatsby-resp-image-link"\n    href="/static/acbaba1145c87b67a011416b1ded9478/1afc1/hello_app.png"\n    style="display: block"\n    target="_blank"\n    rel="noopener"\n  >\n    <span\n    class="gatsby-resp-image-wrapper"\n    style="position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 750px;"\n  >\n    <span\n      class="gatsby-resp-image-background-image"\n      style="padding-bottom: 22.445414847161572%; position: relative; bottom: 0; left: 0; background-image: url(\'data:image/svg+xml,%3csvg xmlns=\\\'http://www.w3.org/2000/svg\\\' width=\\\'400\\\' height=\\\'90\\\'%3e%3cpath d=\\\'M0 4v3h401V0H0v4\\\' fill=\\\'%23d3d3d3\\\' fill-rule=\\\'evenodd\\\'/%3e%3c/svg%3e\'); background-size: cover; display: block;"\n    ></span>\n    <img\n        class="gatsby-resp-image-image"\n        style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;"\n        alt="hello_app"\n        title=""\n        src="/static/acbaba1145c87b67a011416b1ded9478/35c67/hello_app.png"\n        srcset="/static/acbaba1145c87b67a011416b1ded9478/7b5b4/hello_app.png 188w,\n/static/acbaba1145c87b67a011416b1ded9478/d266f/hello_app.png 375w,\n/static/acbaba1145c87b67a011416b1ded9478/35c67/hello_app.png 750w,\n/static/acbaba1145c87b67a011416b1ded9478/1568d/hello_app.png 1125w,\n/static/acbaba1145c87b67a011416b1ded9478/1afc1/hello_app.png 1145w"\n        sizes="(max-width: 750px) 100vw, 750px"\n      />\n  </span>\n  </a></p>\n<blockquote>\n<p>Tarkkasilm√§inen saattoi huomata, ett√§ React itse asiassa kertoi meille aiemmin miss√§ virhe on: selainikkunasa n√§kyi viesti: <code class="language-text">src/App.js: Module not found: Can&#39;t resolve &#39;./App.css&#39; in &#39;karvakuonot/src/&#39;</code>.  Viestiss√§ siis lukee, ett√§ tiedostossa <code class="language-text">src/App.js</code>on virhe, ja ett√§ se liittyy jotenkin tiedostoon <code class="language-text">App.css</code>. T√§ss√§ tapauksessa tiedosto oli poistettu, eik√§ React l√∂yt√§nyt sit√§. T√§m√§ johti virheeseen <code class="language-text">Module not found: Can&#39;t resolve</code>. Jos sovelluksesi ei vastaisuudessa jostain syyst√§ toimi, kannattaa selaimen virheviesti lukea tarkkaan!</p>\n</blockquote>\n<p><strong>Teht√§v√§:</strong> Mik√§li et viel√§ luonut projektia ja siistinyt sit√§, niin tee se nyt.</p>\n<p><a href="https://codento.github.io/react-workshop-2/komponentit/">Tutustutaan seuraavaksi tarkemmin Reactin komponentteihin.</a></p>'}},{node:{fields:{slug:"/komponentit/"},frontmatter:{title:"Reactin komponentit"},html:'<p>React-sovellukset koostuvat ideaalisti useista pienist√§ komponenteista, joilla on jokin rajattu vastuualue. Esimerkiksi meill√§ voisi olla komponentti <code class="language-text">Comments</code>, jonka teht√§v√§ olisi n√§ytt√§√§ sivulla johonkin asiaan liittyvi√§ kommentteja, tai sitten komponentti <code class="language-text">Avatar</code>, jonka teht√§v√§ olisi n√§ytt√§√§ sille annettu avatari. Kun suunnittelet sovelluksesi toimintaa l√§ht√∂kohtana on se, ett√§ pyrit l√∂yt√§m√§√§n ne pienimm√§t j√§rkev√§t rakennuspalikat joilla voisit koostaa toimivan kokonaisuuden.</p>\n<p>Komponenttien pienuudessa on seuraavat hy√∂dyt:</p>\n<ul>\n<li>Helppo testata</li>\n<li>Voidaan k√§ytt√§√§ uudelleen muualla sovelluksessa (tai jopa kokonaan toisessa sovelluksessa!)</li>\n<li>Helpottaa sovelluksen muuttamista my√∂hemmin</li>\n<li>Helpottaa komponenttien koodin lukemista</li>\n</ul>\n<p>Kyseess√§ on kuitenkin tietynlainen tasapainoilu, sill√§  joskus liian pienet ja yksityiskohtaiset komponentit monimutkaistavat sovellustasi tarpeettomasti.</p>\n<p>Komponentteihin liittyy monia yksityiskohtia, kuten komponentin elinkaaren hallinta, joka sis√§lt√§√§ mm. komponentin alustuksen, eli "mounttaamisen", kun komponentti n√§ytet√§√§n ensimm√§isen kerran ja purkamisen, eli "dismounttaamisen", kun komponenttia ei en√§√§ n√§ytet√§ sovelluksessa. Keskitymme nyt alkuun kuitenkin pelk√§st√§√§n komponentin esitt√§miseen, eli miten React-komponentti saadaan n√§kym√§√§n sovelluksessa.</p>\n<p>Reactissa on kahdenlaisia komponentteja: luokkakomponentteja ja funktiokomponentteja. Luokkakomponentit ovat olleet pitk√§√§n suositumpia, sill√§ ne ovat tarjonneet enemm√§n toiminnallisuutta kuin funktiokomponentit. Nyky√§√§n kuitenkin my√∂s funktiokomponenteilla voi tehd√§ kaiken saman kuin luokkakomponenteilla, mutta yleens√§ tehokkaammin. Lis√§ksi funktiokomponenttien rakenne on yksinkertaisempi ja niit√§ on helpompi testata. Niinp√§ niiden suosio on viime aikoina kasvanut, joten suosittelemmekin k√§ytt√§m√§√§n funktiokomponentteja. Huomaa kuitenkin, ett√§ Internetin esimerkeiss√§ saattaa tulla my√∂s luokkakomponentteja vastaan.</p>\n<h3>Luokkakomponentit</h3>\n<p>Olemme tutustuneet jo yhteen luokkakomponenttiin: <em>CRA</em> loi valmiin <code class="language-text">App</code>-komponentin, jota olemme ehtineet muokatakin. Komponentti n√§ytt√§√§ t√§lt√§:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>\n        Hei maailma<span class="token operator">!</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre></div>\n<p>N√§emme, ett√§ komponentti on luokkakomponentti koska komponentti alkaa m√§√§rittelyll√§ <code class="language-text">class App extends Component {</code>. K√§yt√§nn√∂ss√§ m√§√§rittely tarkoittaa sit√§, ett√§ <code class="language-text">App</code> on luokka, jolla on Reactin itsens√§ tarjoaman <code class="language-text">Component</code>-luokan toiminnallisuus. <code class="language-text">Component</code>-luokka sis√§lt√§√§ paljon esimerkiksi komponentin elinkaareen liittyvi√§ toimintoja, mutta emme esittele niit√§ t√§ss√§ sen tarkemmin.</p>\n<p>T√§rkein toiminnallisuus joka komponentin on toteutettava on <code class="language-text">render</code>-funktio, joka yll√§olevassa <code class="language-text">App</code>-komponentissa palauttaa komponentin sis√§lt√§m√§n HTML:n. T√§m√§ komponentin palauttama HTML on se, mik√§ lopulta n√§kyy selaimessa.</p>\n<h3>Funktiokomponentit</h3>\n<p>Funktiokomponentit ovat hieman erin√§k√∂isi√§. Alla oleva esimerkki vastaa nykyist√§ <code class="language-text">App</code>-luokkakomponenttia, mutta se on kirjoitettu funktiokomponenttina:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>\n      Hei maailma<span class="token operator">!</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre></div>\n<p><code class="language-text">App</code>-komponentin m√§√§rittely on muuttunut muotoon <code class="language-text">const App = () =&gt; {</code> ja nyt HTML-sis√§lt√∂ palautuu suoraan komponentista ilman erillist√§ <code class="language-text">render</code>-funktiota. Lis√§ksi en√§√§ ei tarvitse tuoda <code class="language-text">Component</code>-riippuvuutta, joten ensimm√§isell√§ rivill√§ tarvitsee en√§√§ tuoda ainoastaan itse React. Huomaa, ett√§ komponentin palauttama HTML on sulkeiden sis√§ll√§.</p>\n<p><code class="language-text">App</code>-komponentin kohdalla luokka- ja funktiokomponenttien ero ei toistaiseksi ole kovin suuri, mutta funktiokomponentti on jonkin verran yksinkertaisempi. Kun komponenttien toiminnallisuus kasvaa niin funktiokomponentit muuttuvat kuitenkin huomattavasti selke√§mmiksi.</p>\n<blockquote>\n<p>Yll√§ sanomme, ett√§ komponentit palauttavat HTML:√§√§; se ei aivan pid√§ paikkaansa. Komponentit itse asiassa palauttavat JSX:√§√§, jota k√§sittelemme tarkemmin my√∂hemm√§ss√§ osiossa. T√§ss√§ vaiheessa kuitenkin riitt√§√§ ajatella, ett√§ komponentti palauttaa vain HTML:√§√§.</p>\n</blockquote>\n<p><strong>Teht√§v√§:</strong> Tee sovelluksesi <code class="language-text">App</code>-komponentista funktiokomponentti kuten yll√§.</p>\n<h2>Ensimm√§iset omat komponentit</h2>\n<p>Seuraavaksi luodaan kokonaan uusia komponentteja. Haluamme antaa sovelluksemme seuraavann√§k√∂isen rakenteen:</p>\n<p><a\n    class="gatsby-resp-image-link"\n    href="/static/773b1c1fa3492cc51d978b8951c66e71/bcefc/structure.png"\n    style="display: block"\n    target="_blank"\n    rel="noopener"\n  >\n    <span\n    class="gatsby-resp-image-wrapper"\n    style="position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 750px;"\n  >\n    <span\n      class="gatsby-resp-image-background-image"\n      style="padding-bottom: 122.15619694397284%; position: relative; bottom: 0; left: 0; background-image: url(\'data:image/svg+xml,%3csvg xmlns=\\\'http://www.w3.org/2000/svg\\\' width=\\\'400\\\' height=\\\'489\\\'%3e%3cpath d=\\\'M154 20l105 5a8945 8945 0 0 1-105-5m-35 27c-2 6-2 6-2 26v27l1 7h-12l-11 1h23v4a6217 6217 0 0 0 3 102v7h-8l-8 1 8 1h8v5a1677 1677 0 0 1 4 102v13h-12c-9 0-13 0-12 1l12 1h12v12a678 678 0 0 1 1 1v-13h15v11l1 12h92l94 1 3-276V81H140v25l1-12 1-11 94-1h94v9a59813 59813 0 0 1-3 267v10l-92-1h-92v-18l3-2c5-3 5-3 0-6l-4-2V227l4-2 4-2 1 29c0 32 1 40 6 51 6 11-1 10 80 10h71l4-4c5-4 8-11 10-22 1-9 4-97 3-115-1-17-5-31-12-37l-3-3-73 6-72 6-3 3c-8 7-11 20-11 51l-1 23-4-2-4-2v-94l2 1c5 2 175 3 179 2 5-2 5-4 4-20-1-15-2-16-7-17-4-1-162-1-171 1-5 0-6 1-7 10v7l-5-2c-5-4-6-4-2 0l3 2h-19V95c-2-27-1-41 2-47l2-6-4 5m234 37c1 153 2 316 1 319v4l1-3a18115 18115 0 0 0-2-320m-166 7c-33 0-41 1-42 2-1 2-2 27 0 29s175 4 179 2l2-2v-12c-1-16-2-18-5-19H187m-68 19a11253 11253 0 0 0 3 102v9h19v-56a1020 1020 0 0 1 1-56c0-2-1-1-5 1l-5 2c0-1 1-2 3-2 2-2 2-2-7-2s-9 0-9 2m113 30c-54 4-66 6-68 7-4 2-8 11-9 20-3 10-3 112-1 122 2 9 6 17 9 20l3 2h71c81 0 74 1 78-9 5-10 6-18 7-60 2-60 2-74 0-83-3-11-6-18-9-22s-1-4-81 3M124 264l2 60v19h15V223h-18l1 41m99 59c-70 1-70 1-71 5s-2 31-1 32l3 2c2 1 157 4 160 2 5-2 6-4 5-21-2-20-2-21-21-21l-75 1m-12 2c-47 0-55 1-56 2-3 2-4 31-2 33 2 1 156 4 160 3 5-1 5-4 4-20l-3-17c-1-2-17-2-103-1m27 65c-9 4-15 13-13 19 3 8 25 10 33 2 5-4 4-11-2-17-5-6-10-7-18-4m-93 44a6155 6155 0 0 0 182 4 3825 3825 0 0 1-181-4\\\' fill=\\\'%23d3d3d3\\\' fill-rule=\\\'evenodd\\\'/%3e%3c/svg%3e\'); background-size: cover; display: block;"\n    ></span>\n    <img\n        class="gatsby-resp-image-image"\n        style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;"\n        alt="structure"\n        title=""\n        src="/static/773b1c1fa3492cc51d978b8951c66e71/35c67/structure.png"\n        srcset="/static/773b1c1fa3492cc51d978b8951c66e71/7b5b4/structure.png 188w,\n/static/773b1c1fa3492cc51d978b8951c66e71/d266f/structure.png 375w,\n/static/773b1c1fa3492cc51d978b8951c66e71/35c67/structure.png 750w,\n/static/773b1c1fa3492cc51d978b8951c66e71/1568d/structure.png 1125w,\n/static/773b1c1fa3492cc51d978b8951c66e71/bcefc/structure.png 1178w"\n        sizes="(max-width: 750px) 100vw, 750px"\n      />\n  </span>\n  </a></p>\n<p>Muutetaan sovellusta siten, ett√§ sovelluksessa on omat komponentit otsakkeelle, sis√§ll√∂lle, ja sivun alalaidalle.</p>\n<h3>Sovelluksen sis√§lt√∂</h3>\n<p>T√§ll√§ hetkell√§ sovellus ei tee muuta kuin n√§ytt√§√§ tekstin <em>Hei maailma!</em>. Luodaan sovellukseen uusi komponentti, joka tulee sis√§lt√§m√§√§n sovelluksen p√§√§asiallisen sis√§ll√∂n. Luo hakemistoon <code class="language-text">src/</code> uusi tiedosto nimelt√§ <code class="language-text">Content.js</code>. Komponentin sis√§lt√∂ voisi n√§ytt√§√§ esimerkiksi t√§lt√§:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Content</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>main<span class="token operator">></span>\n      Sis√§lt√∂\n    <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Content<span class="token punctuation">;</span></code></pre></div>\n<blockquote>\n<p>Huomaa komponentin viimeinen rivi <code class="language-text">export default</code>. Jotta sovelluksessa voidaan k√§ytt√§√§ komponenttia, on aina muistettava lis√§t√§ t√§m√§ viimeinen rivi, joka "vie" luodun komponentin sovelluksen muiden osien k√§ytt√∂√∂n.</p>\n</blockquote>\n<p>Yll√§ olemme luoneet <code class="language-text">Content</code>-nimisen komponentin, joka ei viel√§ tee muuta kuin palauttaa tekstin <em>Sis√§lt√∂</em>. Teksti on lis√§tty HTML-elementin <code class="language-text">&lt;main&gt;</code> sis√§lle, sill√§ kyseess√§ on sovelluksemme "p√§√§sis√§lt√∂". Komponentti on funktiokomponentti, joten tiedoston alussa tarvitsee ainoastaan tuoda komponentin riippuvuutena React. <code class="language-text">Content</code>-komponentti muistuttaa hyvin paljon <code class="language-text">App</code>-komponenttia, sill√§ kummassakaan ei ole viel√§ paljoa toiminnallisuutta.</p>\n<p>Komponentti ei kuitenkaan viel√§ n√§y miss√§√§n, vaan se on lis√§tt√§v√§ sovellukseen. T√§ll√§ hetkell√§ meill√§ ei ole kuin <code class="language-text">App</code>-komponentti, joten lis√§t√§√§n komponentti sinne. Jotta uutta <code class="language-text">Content</code>-komponenttia voitaisiin k√§ytt√§√§ <code class="language-text">App</code>-komponentissa, se on tuotava erikseen <code class="language-text">App</code>-komponentin k√§ytt√∂√∂n kuten Reactkin.</p>\n<p>Lis√§t√§√§n rivi <code class="language-text">import Content from &#39;./Content&#39;;</code> heti rivin <code class="language-text">import React from &#39;react&#39;;</code> j√§lkeen. Korvataan samalla <code class="language-text">App</code>-komponentissa teksti <em>Hei maailma!</em> uudella <code class="language-text">Content</code>-komponentillamme. <code class="language-text">App</code>-komponentti n√§ytt√§√§ muutosten j√§lkeen t√§lt√§:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Content <span class="token keyword">from</span> <span class="token string">\'./Content\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>Content <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre></div>\n<blockquote>\n<p>Jotta voimme k√§ytt√§√§ komponentteja muissa komponenteissa, on meid√§n aina erikseen muistettava tuoda komponentti <code class="language-text">import</code>-lauseella. Yll√§ tuontilause alkaa <code class="language-text">import Content</code>, koska exporttaamme <em>Content.js</em> tiedostossa komponentin nimelt√§ <code class="language-text">Content</code>. Tuontilause loppuu <code class="language-text">from &#39;./Content&#39;</code>, koska tiedoston nimi on <em>Content.js</em>. Tuontilauseet ovat siis muotoa <code class="language-text">import komponentin_nimi from &#39;komponentin_tiedosto&#39;</code>. Kun tuotava tiedosto p√§√§ttyy <em>.js</em>, niin p√§√§tett√§ ei tarvitse kirjoittaa.</p>\n</blockquote>\n<p>Huomaa, ett√§ sovelluksen komponentit ovat k√§√§ritty yhden div-elementin sis√§√§n:</p>\n<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>\n<span class="token operator">...</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre></div>\n<p>React vaatii, ett√§ komponentti palauttaa maksimissaan yhden juurikomponentin. N√§in ollen mik√§li haluamme palauttaa enemm√§n kuin yhden komponentin, niin ne tulee k√§√§ri√§ yhden juurikomponentin sis√§√§n:</p>\n<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div<span class="token operator">></span>\n   <span class="token operator">&lt;</span>Component1 <span class="token operator">/</span><span class="token operator">></span>\n   <span class="token operator">&lt;</span>Component2 <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre></div>\n<p><strong>Teht√§v√§:</strong> Luo funktionaaliset komponentit <code class="language-text">Header</code> ja <code class="language-text">Footer</code> omiin tiedostoihinsa <code class="language-text">Header.js</code> ja <code class="language-text">Footer.js</code>. <code class="language-text">Header</code>-komponentin pit√§isi palauttaa HTML-elementti <code class="language-text">&lt;header&gt;</code> joka sis√§lt√§√§ tekstin <em>Otsake</em> ja <code class="language-text">Footer</code>-komponentin tulisi palauttaa HTML-elementin <code class="language-text">&lt;footer&gt;</code>, joka sis√§lt√§√§ tekstin <em>Alalaita</em>. Muokkaa my√∂s <code class="language-text">App</code>-komponenttia siten, ett√§ juuri luomasi komponentit n√§kyv√§t oikeissa paikoissa.</p>\n<p>Kun teht√§v√§t on suoritettu, sovelluksen pit√§isi n√§ytt√§√§ suunnilleen t√§lt√§:</p>\n<p><a\n    class="gatsby-resp-image-link"\n    href="/static/61372c6a85c3ac17d1aaad749e352c27/6cc13/structure_without_styles.png"\n    style="display: block"\n    target="_blank"\n    rel="noopener"\n  >\n    <span\n    class="gatsby-resp-image-wrapper"\n    style="position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 750px;"\n  >\n    <span\n      class="gatsby-resp-image-background-image"\n      style="padding-bottom: 32.024432809773124%; position: relative; bottom: 0; left: 0; background-image: url(\'data:image/svg+xml,%3csvg xmlns=\\\'http://www.w3.org/2000/svg\\\' width=\\\'400\\\' height=\\\'128\\\'%3e%3cpath d=\\\'M0 4v3h401V0H0v4\\\' fill=\\\'%23d3d3d3\\\' fill-rule=\\\'evenodd\\\'/%3e%3c/svg%3e\'); background-size: cover; display: block;"\n    ></span>\n    <img\n        class="gatsby-resp-image-image"\n        style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;"\n        alt="structure_without_styles"\n        title=""\n        src="/static/61372c6a85c3ac17d1aaad749e352c27/35c67/structure_without_styles.png"\n        srcset="/static/61372c6a85c3ac17d1aaad749e352c27/7b5b4/structure_without_styles.png 188w,\n/static/61372c6a85c3ac17d1aaad749e352c27/d266f/structure_without_styles.png 375w,\n/static/61372c6a85c3ac17d1aaad749e352c27/35c67/structure_without_styles.png 750w,\n/static/61372c6a85c3ac17d1aaad749e352c27/1568d/structure_without_styles.png 1125w,\n/static/61372c6a85c3ac17d1aaad749e352c27/6cc13/structure_without_styles.png 1146w"\n        sizes="(max-width: 750px) 100vw, 750px"\n      />\n  </span>\n  </a></p>\n<p>Sovellus on viel√§ toistaiseksi melko karun n√§k√∂inen. <a href="https://codento.github.io/react-workshop-2/tyylit/">Lis√§t√§√§n sovellukseen seuraavaksi hieman tyyli√§.</a></p>'}},{node:{fields:{slug:"/tyylit/"},frontmatter:{title:"Tyylit"},html:'<p>React-sovelluksen komponenteille voi lis√§t√§ tyylej√§ usealla eri tavalla. K√§yt√§mme kurssilla yksinkertaista CSS-m√§√§rittely√§ tyylien lis√§√§miseen, mutta avainsanoja muihin keinoihin on esimerkiksi <em>UI-Components</em> ja <em>Styled Components</em> mik√§li haluat my√∂hemmin tutustua muihin keinoihin.</p>\n<p>Avaa hakemistosta <code class="language-text">src/</code> tiedosto <code class="language-text">index.css</code>.  Korvaa tiedoston sis√§lt√∂ kokonaan kopioimalla <a href="../index.css">t√§m√§n tiedoston</a> sis√§lt√∂. Jos tunnet CSS:√§√§ voit tutustua tarkemmin tyylim√§√§rittelyihin, mutta tiedoston sis√§ll√∂n ymm√§rt√§minen ei t√§ss√§ vaiheessa ole tarpeellista.</p>\n<p>N√§ill√§ muutoksilla olemme lis√§nneet sovellukseemme tyylit, joita kehtaa esitell√§. Mik√§li sovelluksesi on k√§ynniss√§, selaimen pit√§isi p√§ivitty√§ automaattisesti ja sovelluksen pit√§isi n√§ytt√§√§ kutakuinkin t√§lt√§:</p>\n<p><a\n    class="gatsby-resp-image-link"\n    href="/static/08738cfb0d18cd1adf0d0a358941912e/1afc1/structure_with_styles.png"\n    style="display: block"\n    target="_blank"\n    rel="noopener"\n  >\n    <span\n    class="gatsby-resp-image-wrapper"\n    style="position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 750px;"\n  >\n    <span\n      class="gatsby-resp-image-background-image"\n      style="padding-bottom: 65.24017467248908%; position: relative; bottom: 0; left: 0; background-image: url(\'data:image/svg+xml,%3csvg xmlns=\\\'http://www.w3.org/2000/svg\\\' width=\\\'400\\\' height=\\\'261\\\'%3e%3cpath d=\\\'M0 4v4h401V0H0v4m0 44v14h401V33H0v15\\\' fill=\\\'%23d3d3d3\\\' fill-rule=\\\'evenodd\\\'/%3e%3c/svg%3e\'); background-size: cover; display: block;"\n    ></span>\n    <img\n        class="gatsby-resp-image-image"\n        style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;"\n        alt="structure_with_styles"\n        title=""\n        src="/static/08738cfb0d18cd1adf0d0a358941912e/35c67/structure_with_styles.png"\n        srcset="/static/08738cfb0d18cd1adf0d0a358941912e/7b5b4/structure_with_styles.png 188w,\n/static/08738cfb0d18cd1adf0d0a358941912e/d266f/structure_with_styles.png 375w,\n/static/08738cfb0d18cd1adf0d0a358941912e/35c67/structure_with_styles.png 750w,\n/static/08738cfb0d18cd1adf0d0a358941912e/1568d/structure_with_styles.png 1125w,\n/static/08738cfb0d18cd1adf0d0a358941912e/1afc1/structure_with_styles.png 1145w"\n        sizes="(max-width: 750px) 100vw, 750px"\n      />\n  </span>\n  </a></p>\n<p><strong>Teht√§v√§:</strong> Muuta <code class="language-text">Header</code>-komponentissa oleva <em>Otsake</em>-teksti oman sovelluksesi otsakkeeksi. Yll√§ olemme k√§ytt√§neet otsaketta <em>Karvakuonot</em>, mutta voit my√∂s k√§ytt√§√§ mielikuvitustasi!</p>\n<p>Vaikka sovellus n√§ytt√§√§ nyt paremmalta, se ei viel√§ tee mit√§√§n. <a href="https://codento.github.io/react-workshop-2/tilanhallinta/">Seuraavaksi keskitymmekin itse sis√§lt√∂√∂n.</a></p>'}},{node:{fields:{slug:"/tilanhallinta/"},frontmatter:{title:"Tilanhallinta"},html:'<p>Tilanhallinta on keskeinen asia web-sovelluksissa. Sovelluksen tila m√§√§r√§√§, mit√§ sis√§lt√∂√§ n√§yt√§mme mill√§kin hetkell√§. Tila on siis se, mik√§ erottaa muuttumattomat (ns. staattiset sivut) muuttuvista (ns. dynaamisista) sovelluksista. Reactin tilanhallinnan keskeisimpi√§ termej√§ ovat <code class="language-text">props</code> ja <code class="language-text">state</code>. </p>\n<h2>Props</h2>\n<p>Komponenttipohjaisten sovellusten p√§√§tarkoitus on se, ett√§ jaamme sovelluksemme pieniin osiin, eli komponentteihin, jotka ovat itsen√§isi√§ uudelleenk√§ytett√§vi√§ palikoita joita voimme tarpeidemme mukaan yhdistell√§ suuremmiksi loogisiksi kokonaisuuksiksi. T√∂rm√§√§mme t√§ss√§ kuitenkin nopeasti siihen, ett√§ meid√§n tulisi pysty√§ jotenkin kommunikoimaan ja siirt√§m√§√§n tietoa eri komponenttien v√§lill√§.</p>\n<p>T√§t√§ varten React on suunniteltu siten, ett√§ komponentit voivat ottaa vastaan tietoa, eli <em>props</em>:eja. Muutetaan aiemmin tekem√§√§mme <code class="language-text">Header</code>-komponenttia ottamaan vastaan propsi nimelt√§ <code class="language-text">title</code>:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Header</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> title <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>header<span class="token operator">></span>\n      <span class="token punctuation">{</span>title<span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Header<span class="token punctuation">;</span></code></pre></div>\n<p>Yll√§ olemme lis√§nneet funktiokomponentin <code class="language-text">Header</code> parametriksi <code class="language-text">{ title }</code>. Voimme k√§ytt√§√§ t√§t√§ propsia komponentin palauttamassa HTML:ss√§ samalla lailla, kirjoittamalla <code class="language-text">{title}</code> elementin <code class="language-text">&lt;header&gt;</code> sis√§lle.</p>\n<blockquote>\n<p>T√§ss√§ vaiheessa k√§y ilmi, ett√§ React-komponentit eiv√§t palauttakaan pelkk√§√§ HTML:√§√§, sill√§ HTML:lle ei voi antaa muuttuvaa tietoa kuten <code class="language-text">{title}</code> yll√§. React-komponentit palauttavatkin <em>JSX</em>:√§√§, jonka voi ajatella laajentavan HTML:√§√§. K√§yt√§nn√∂ss√§ JSX sallii meid√§n kirjoittavan mit√§ tahansa JavaScripti√§ HTML:n sekaan, kunhan muistamme k√§√§ri√§ JavaScriptin aaltosulkeisiin <code class="language-text">{}</code>. T√§m√§ tekee React-komponenteista todella hy√∂dyllisi√§ muuttuvan tiedon esitt√§miseen.</p>\n</blockquote>\n<p>Jotta <code class="language-text">Header</code>-komponentti voisi k√§ytt√§√§ propsia <code class="language-text">title</code>, se on jotenkin annettava sille. Propsit v√§litet√§√§n komponentille silloin kun ne lis√§t√§√§n johonkin n√§kym√§√§n. Esimerkiksi kun t√§ll√§ hetkell√§ <code class="language-text">App</code>-komponentissa lis√§√§mme komponentin <code class="language-text">&lt;Header /&gt;</code> jotta saamme otsakkeemme n√§kyviin, niin nyt meid√§n on lis√§ksi annettava <code class="language-text">Header</code>-elementille attribuutti nimelt√§ <code class="language-text">title</code>:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Content <span class="token keyword">from</span> <span class="token string">\'./Content\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">\'./Header\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">\'./Footer\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>Header title<span class="token operator">=</span><span class="token string">\'Karvakuonot\'</span> <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>Content <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>Footer <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre></div>\n<p>Yll√§ annamme <code class="language-text">Header</code>-elementille attribuutin <code class="language-text">title</code>, jonka arvoksi annamme tekstin <code class="language-text">Karvakuonot</code>. T√§m√§ attribuutti v√§litet√§√§n <code class="language-text">Header</code>-komponentille propsina <code class="language-text">title</code>. Huomaa, ett√§ teksti <code class="language-text">Karvakuonot</code> on hipsujen <code class="language-text">&#39;&#39;</code> sis√§ll√§, jotta React tiet√§√§ kyseess√§ olevan teksti√§ (my√∂hemmin annamme propseille muutakin sis√§lt√∂√§ kuin pelkk√§√§ teksti√§).</p>\n<p>Olemme siis tehneet <code class="language-text">Header</code>-komponenttiin seuraavan muutoksen: lis√§simme <code class="language-text">Header</code>-komponentille propsin <code class="language-text">title</code>, jota k√§yt√§mme <code class="language-text">Header</code>-komponentin palauttamassa HTML:ss√§. Koska propsia <code class="language-text">title</code> k√§ytet√§√§n komponentin HTML:ss√§, niin <code class="language-text">Header</code>-komponentin sis√§lt√∂ muuttuu aina kun propsi <code class="language-text">title</code> muuttuu! <code class="language-text">Header</code>-komponentti siis n√§ytt√§√§ aina sen tekstin, joka sille <code class="language-text">App</code>-komponentista annetaan.</p>\n<p>Lis√§ksi lis√§simme <code class="language-text">App</code>-komponentissa <code class="language-text">Header</code>-elementille attribuutin <code class="language-text">title</code>, joka itse asiassa on <code class="language-text">Header</code>-komponentille v√§litett√§v√§ propsi <code class="language-text">title</code>. Toisin sanoen m√§√§r√§√§mme <code class="language-text">App</code>-komponentista, mink√§ arvon <code class="language-text">Header</code>-komponentin <code class="language-text">title</code> saa.</p>\n<p>Propsit ovat yksi Reactin oleellisimmista ominaisuuksista, ja ne mahdollistavat saman komponentin k√§yt√∂n eri sis√§ll√∂n esitt√§miseen; voisimme nyt esimerkiksi luoda useita <code class="language-text">Header</code>-komponentteja, joilla on kaikilla eri sis√§lt√∂ koska voimme v√§litt√§√§ eri komponenteille eri <code class="language-text">title</code>-propsit.</p>\n<p><strong>Teht√§v√§:</strong> Muuta <code class="language-text">Header</code>-komponentti ottamaan vastaan propsi <code class="language-text">title</code>, ja v√§lit√§ sille otsikkoteksti <code class="language-text">App</code>-komponentista.</p>\n<p>Propseja voidaan k√§ytt√§√§ miss√§ tahansa komponentin palauttaman HTML:n sis√§ll√§, vaikka elementtien attribuutteina, eik√§ pelk√§st√§√§n tekstisis√§lt√∂n√§. Esimerkiksi kuvitteellisessa komponentissa (jota emme k√§yt√§ sovelluksessamme) nimelt√§ <code class="language-text">Avatar</code>, voisimme antaa propsin <code class="language-text">url</code> jota k√§yt√§mme kuvan n√§ytt√§miseen:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">Avatar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> url <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>url<span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token string">\'\'</span> <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>\n<p>Yll√§ <code class="language-text">url</code>-propsi annetaan <code class="language-text">img</code>-elementin <code class="language-text">src</code>-attribuutin arvoksi, eli n√§ytett√§v√§n kuvan osoite annetaan komponentille propsina (kts. kertauksesta miten HTML:n <code class="language-text">img</code>-elementti toimii jos se ei ole tuttu).</p>\n<p><strong>Teht√§v√§:</strong> Luo hakemistoon <code class="language-text">src/</code> uusi tiedosto nimelt√§ <code class="language-text">Button.js</code>. Luo t√§h√§n tiedostoon uusi komponentti <code class="language-text">Button</code>, joka saa propsin nimelt√§ <code class="language-text">icon</code>. Komponentin tulee palauttaa seuraava sis√§lt√∂:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>icon<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code></pre></div>\n<p><strong>Teht√§v√§:</strong> Muuta <code class="language-text">Footer</code>-komponentti palauttaman <em>Alalaita</em>-tekstin sijasta kaksi Button-komponenttia, joista toinen saa propsin <code class="language-text">icon</code> arvona <code class="language-text">&#39;heart-broken&#39;</code> ja toinen arvon <code class="language-text">heart</code>.</p>\n<p>Kun yll√§olevat teht√§v√§t on valmiit, niin sovelluksen pit√§isi n√§ytt√§√§ t√§lt√§:</p>\n<p><a\n    class="gatsby-resp-image-link"\n    href="/static/bbef46a772905acc5b45694dc017b6f3/8e724/app-with-btns.png"\n    style="display: block"\n    target="_blank"\n    rel="noopener"\n  >\n    <span\n    class="gatsby-resp-image-wrapper"\n    style="position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 750px;"\n  >\n    <span\n      class="gatsby-resp-image-background-image"\n      style="padding-bottom: 57.22222222222223%; position: relative; bottom: 0; left: 0; background-image: url(\'data:image/svg+xml,%3csvg xmlns=\\\'http://www.w3.org/2000/svg\\\' width=\\\'400\\\' height=\\\'229\\\'%3e%3cpath d=\\\'M0 12v12h401V0H0v12m200 197v20h200v-40H200v20\\\' fill=\\\'%23d3d3d3\\\' fill-rule=\\\'evenodd\\\'/%3e%3c/svg%3e\'); background-size: cover; display: block;"\n    ></span>\n    <img\n        class="gatsby-resp-image-image"\n        style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;"\n        alt="app_with_btns"\n        title=""\n        src="/static/bbef46a772905acc5b45694dc017b6f3/35c67/app-with-btns.png"\n        srcset="/static/bbef46a772905acc5b45694dc017b6f3/7b5b4/app-with-btns.png 188w,\n/static/bbef46a772905acc5b45694dc017b6f3/d266f/app-with-btns.png 375w,\n/static/bbef46a772905acc5b45694dc017b6f3/35c67/app-with-btns.png 750w,\n/static/bbef46a772905acc5b45694dc017b6f3/1568d/app-with-btns.png 1125w,\n/static/bbef46a772905acc5b45694dc017b6f3/8e846/app-with-btns.png 1500w,\n/static/bbef46a772905acc5b45694dc017b6f3/a60d7/app-with-btns.png 2250w,\n/static/bbef46a772905acc5b45694dc017b6f3/8e724/app-with-btns.png 2880w"\n        sizes="(max-width: 750px) 100vw, 750px"\n      />\n  </span>\n  </a></p>\n<blockquote>\n<p>Huomaa, ett√§ propseja voi v√§litt√§√§ komponentille my√∂s toisella tavalla: sen sijaan, ett√§ propsit annetaan komponentille aaltosulkeissa kuten yll√§ <code class="language-text">const Header = ({ title }) =&gt; {</code>, joskus ne n√§kee annettavan n√§in: <code class="language-text">const Header = (props) =&gt; {</code>. T√§m√§ tarkoittaa k√§yt√§nn√∂ss√§ samaa asiaa, mutta komponentin propsit ovat piilossa props-nimisess√§ JavaScript-objektissa. On huomattavasti selke√§mp√§√§ eritell√§ komponentin propsit aaltosulkeissa, joten k√§yt√§mme aina t√§t√§ tapaa. </p>\n</blockquote>\n<h2>State</h2>\n<p>Komponentille annettujen propsien lis√§ksi komponentilla voi olla oma sis√§inen tilansa, eli <em>state</em>. Statea voidaan k√§ytt√§√§ komponentin sis√§ll√§ kuten propsejakin, mutta propseja ja statea ei sovi sekoittaa toisiinsa. Propsit ovat jotain mit√§ komponentille annetaan, kun taas state on jotain mit√§ komponentti hallitsee itse. Komponentti ei saa muuttaa "vanhemmiltaan" saatuja propseja suoraan, kun taas komponentin sis√§ist√§ statea saa muuttaa vapaasti. Toisaalta my√∂sk√§√§n "vanhemmalla" ei ole p√§√§sy√§ "lapsi"-komponenttinsa sis√§iseen tilaan.</p>\n<p>State saadaan k√§ytt√∂√∂mme Reactin <code class="language-text">useState</code>-funktiolla, joka tulee ensin importata seuraavasti:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'React\'</span><span class="token punctuation">;</span></code></pre></div>\n<p>Funktion toiminta on jokseenkin monimutkainen, vaikka staten k√§ytt√∂ itsess√§√§n on yksinkertaista. State saadaan k√§ytt√∂√∂n seuraavan n√§k√∂isell√§ funktiokutsulla:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></div>\n<p>Tarkastellaan funktiokutsua tarkemmin. <code class="language-text">useState</code>-funktio palauttaa kaksi arvoa, jotka tallennetaan muuttujiin <code class="language-text">count</code> ja <code class="language-text">setCount</code>. <code class="language-text">const [count, setCount]</code> siis vastaanottaa <code class="language-text">useState</code>-funktion palauttamat kaksi arvoa, ja asettaa toisen arvoista <code class="language-text">count</code>-muuttujaan, ja toisen arvon <code class="language-text">setCount</code>-muuttujaan. J√§rjestyksell√§ on t√§ss√§ v√§li√§, sill√§ ensimm√§inen <code class="language-text">useState</code>-funktion palauttama arvo on itse tila, eli state. Staten alkuarvo on sama mik√§ <code class="language-text">useState</code>-funktiolle annetaan parametrina (t√§ss√§ tapauksessa luku <code class="language-text">1</code>). Funktion palauttama toinen arvo on funktio, jolla tilaa muutetaan. Muuttujien nimill√§ ei kuitenkaan ole mit√§√§n merkityst√§, eli yll√§oleva rivi koodia voisi olla esimerkiksi:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>kissa<span class="token punctuation">,</span> koira<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>\n<p>T√§m√§ saattaa vaikuttaa hankalalta, mutta esimerkki helpottanee kokonaisuuden ymm√§rt√§mist√§:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token comment">// count saa yll√§ arvokseen 1, koska annamme useState-funktiolle parametrin 1</span>\n<span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token comment">// countin arvo on nyt 2, sill√§ setCount on funktio, joka muuttaa countin arvoa</span>\n<span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n<span class="token comment">// countin arvo on nyt 5</span></code></pre></div>\n<p>Eli kun kutsumme <code class="language-text">useState</code>-funktiota jollakin parametrilla, se yksinkertaisesti asettaa annetun parametrin tilaksi ja palauttaa sen ensimm√§isen√§ arvonaan, ja toisena arvonaan se palauttaa funktion, jolla tilaa voi muuttaa. <code class="language-text">useState</code>-funktiolle annettu parametri voi olla mit√§ tahansa, ja voimme nimet√§ palautetut arvot miksi haluamme - voisimme esimerkiksi nimet√§ yll√§olevan esimerkin muuttujat <code class="language-text">const [number, setNumber] = useState(1)</code>, ja ainoa mik√§ muuttuisi on nimet, joilla viittaamme tilaan ja muutamme sit√§.</p>\n<p>Komponenteille tila annetaan heti komponenttien alussa, jotta olisi selke√§√§ mit√§ tiloja komponentilla on. Esimerkiksi kuvitteellinen komponentti <code class="language-text">Counter</code>, jolla on tila count, voitaisiin m√§√§ritell√§ seuraavasti:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">Counter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">)</span> \n<span class="token punctuation">}</span></code></pre></div>\n<p>Yll√§oleva esimerkkikomponentti luo tilan <code class="language-text">count</code> (joka saa alkuun arvokseen 1), jonka se palauttaa komponentin n√§kym√§n√§. React haluaa, ett√§ tila m√§√§ritell√§√§n heti komponentin alussa, joten kutsumme <code class="language-text">useState</code>-funktiota heti ensimm√§isen√§ komponentissa. Nyt komponentissa voitaisiin kutsua funktiota <code class="language-text">setCount(3)</code>, jolloin komponentin n√§kym√§ p√§ivittyisi automaattisesti. Viel√§ meill√§ ei kuitenkaan ole keinoa kutsuta <code class="language-text">setCount</code>-funktiota komponentissa, vaan se esitell√§√§n seuraavassa osiossa.</p>\n<p><strong>Teht√§v√§:</strong> Lis√§√§ <code class="language-text">App</code>-komponentille tila kutsumalla <code class="language-text">useState</code>-funktiota komponentin alussa. Aseta <code class="language-text">useState</code>-funktion palauttamat arvot muuttujiin <code class="language-text">[pets, setPets]</code> ja alusta tilan arvoksi tyhj√§ lista <code class="language-text">[]</code>.</p>\n<p><a href="https://codento.github.io/react-workshop-2/elinkaari/">Seuraavaksi tutustumme komponentin elinkaareen, ja miten tilaa voidaan hy√∂dynt√§√§.</a></p>'}},{node:{fields:{slug:"/elinkaari/"},frontmatter:{title:"Elinkaari"},html:'<h1>Komponenttien elinkaari</h1>\n<p>Jokaisella React komponentilla on elinkaari, joka alkaa siit√§ hetkest√§, kun komponentti ensimm√§isen kerran ilmestyy n√§yt√∂lle eli "mountataan" ja p√§√§ttyy siihen, kun komponentti katoaa n√§yt√∂lt√§ eli "dismountataan". N√§iden v√§liss√§ oleellisia elinkaaren vaiheita ovat komponentin tilanmuutokset, eli kun komponentti saa ulkopuolelta uusia propseja tai sitten sen sis√§inen tila muuttuu. L√§ht√∂kohtaisesti aina kun komponenttiin kohdistuu tilanmuutos, se piirrett√§√§n, eli "render√∂id√§√§n" n√§yt√∂lle uudelleen, jotta esimerkiksi propsina saadut muutokset n√§kyv√§t n√§yt√∂ll√§.</p>\n<p><a\n    class="gatsby-resp-image-link"\n    href="/static/0307d8376722cf5b0a368df80cf726de/6b691/component-lifecycle.png"\n    style="display: block"\n    target="_blank"\n    rel="noopener"\n  >\n    <span\n    class="gatsby-resp-image-wrapper"\n    style="position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 750px;"\n  >\n    <span\n      class="gatsby-resp-image-background-image"\n      style="padding-bottom: 51.48717948717949%; position: relative; bottom: 0; left: 0; background-image: url(\'data:image/svg+xml,%3csvg xmlns=\\\'http://www.w3.org/2000/svg\\\' width=\\\'400\\\' height=\\\'206\\\'%3e%3cpath d=\\\'M13 16c-4 6-1 12 6 12l4-2 1-2 1 2c1 2 6 3 8 0h2c0 2 1 2 9 2h9l-1-4v-5c-1-2-17-1-17 1h-1c-2-3-8-2-9 1l-4 1-2 1-1 2-1-4 1-4 1 2 2 1c2 0 2-1 2-3-1-4-8-4-10-1m112 5v7h11l12-1h1c2 2 8 1 9 0 0-2 0-2 2 0l4 1c4-1 5-3 2-3-2 0-3-1-3-2 0-3 5-2 6 1 0 3 1 4 3 4 2 1 2 1 0 1-4 0-3 2 1 3 3 0 6-2 6-6 0-2 0-2 2 0 2 3 14 3 14 0l-1-7c0-5 0-5-2-5-3 0-3 0-2 6v5h-3c-2 0-3 0-3-2s0-2 3-1c2 0 2 0 2-2-1-3-8-3-9 1-1 1-1 1-1-1 0-1-1-2-3-2s-2 0-1 4l-1 3-1-3v-4h-6c-5 0-7 0-8 2h-2c-1-2-6-3-8-1h-1v-2l1-1c0-3-5-2-6 0-1 1-2 3-1 6l-1 3-1-3c0-4 0-4-3-4-2 0-2 0-2 4v2l-2-1-2 1c-1 1-1-1-1-4l1-6h-6v7m-71 4v7h2c3 0 3 0 3-2-1-2-1-3 2-2 2 0 2 0 3-2v-2l2 2c3 4 9 2 9-3s-6-7-9-3c-2 2-2 2-2 0-1-1-2-2-6-2h-4v7m22-2v5h6l6-1h1l11 1h10l-1-4-1-5H97c-3-3-9-1-9 4 0 2 0 3-1 2-1-7-1-7-6-7h-5v5m126 35c-3 2-2 2 1 5h2c-1-2-1-2 2-1 2 1 3 6 0 8-2 2-6 0-7-4-1-3-2-4-3-1-1 4 4 9 8 9 3 0 7-5 7-8s-3-7-5-7l-2-1c0-3-1-2-3 0M58 77h43v40H17V97l-1-19v40h86V97h24l24 1h3l3-1v10l1 11h86V97h24a108 108 0 0 1 27 1l3-1v10l1 11h86V76h-87v10c0 11 0 11-6 8l-1 1c1 1-5 1-23 1h-24V76h-87v10c0 11 0 11-6 8l-1 1c1 1-5 1-23 1h-24V76H16l42 1m99 20l1 20h84V77h-85v20m141 0l1 20h84V77h-85v20m23-5l-1 3c0 3 0 3 5 3h12l2-1v-2l1 2 3 1h15l1-2 1 1c1 1 1 1 1-1 0-3 0-3-4-3h-12c-2 0-3 0-3 2l-1 3v-3c0-2-3-3-6-2-5 1-9 0-11-1h-3M44 93h-2c-2 0-2 0-2 3 0 2 0 2 1 1l1-1c0 2 19 3 26 2h8l1-1 1-1 1 2 1-2c0-2-1-2-5-2l-4-1-2-1-2 1h-2l-2 1-1 3-1-2c1-1 0-2-2-2h-9l-3-1-3 1m143 2c0 3 2 5 4 3h1c0 2 1 2 3 1 1-1 2-2 5-1h12c2-1 1-4-2-4l-2-1h-4c-1 0-2 0-2 2-1 1-1 1-1-1 0-1 0-2-1-1h-8l-1-1-1 3c0 3-1 2-2-1-1-2-1-1-1 1M30 134c0 2 0 2-1 1l-4-1c-5 0-6 1-5 3 0 2 3 3 3 1l1-1c1 1 2 0 3-1h1c0 2 5 2 5 0h1l8 1c6 1 7 0 6-1-2-1-2-2 0-1l1-1v-1h1l-3-1-3 1h-1c-1 0-2 0-2 2h-1c-1-1-2-2-5-1l-4-1c-1-1-1-1-1 1m166-1l-18 1c-16 0-16 0-16 2s7 2 8 0h2c1-1 1-1 1 1 1 2 1 2 3 1h3l3-2h2c0 1 4 2 5 1h1l1-1h1c0 2 3 1 3-1l1 1c1 2 2 2 2 1h2l1 1c0-1 8-2 10-1h21l1-1h4l1 1h5l1 1h8l1-3c0-4-1-4-2-1l-1 1c0-1-1-2-8-1l-7-1v-1l-2 1-1 1h-4c-1 1-2 0-3-1h-14c-1-2-7-1-7 0h-8m139 1h-17c-15 0-15 0-15 2s7 2 8 0h2c1-1 1-1 1 1 1 2 1 2 3 1h3l3-1 2-1c1 2 7 2 7 0h1c0 2 3 1 3-1l2 1 1 1c0-2 0-2 2-1 1 2 1 2 1 0h1l9 1 1-1h6c1 2 11 2 12 0h2c1 2 5 2 5 0l-1-3-2 1h-1c-1-1-5 0-5 1h-1l-8-2h-7c0-2-2 0-2 2s0 2-1 0-5-4-5-2l-1 1v-1l-1-1-1 1h-4c0-2-2-1-3 1m-304 7l-7 1c-4 0-5 1-4 4 0 2 2 3 3 1 0-1 1-2 2-1l2-1h12l7 1 7-1 2-1 1 1c0 2 2 1 2-1h1c0 2 1 2 2 2h8c3 1 3 1 3-2s0-3-2-2c0 2-1 2-1 1l-6-1-8-1h-5c-1 0-2 0-3 2l-1 1c0-2-5-3-5-1h-1c0-2-1-2-3-1h-3l-3-1m152 1h-2c0-2-5-1-6 1l-1 1-3-2h-4c-3-1-6 0-6 2 0 3 5 3 5 0h1c1 2 13 2 14 1h1c0 2 10 1 10-1l1 1 1 2v-2c0-2 0-2 1 0s1 2 3 1h5c2 0 3 0 3-2h1c1 2 5 3 6 1h2l4 1h4l2 1 16-1 1 1 1-3-1-3-1 1h-9c-2-1-6 0-6 2l-1 1v-3l-2-1-2 2c-1 2-1 2-1 0s-4-3-4-1h-14c-11 0-15 1-16 2h-3l2-2v-1l-2 1M57 158h-2c-2 0-2 0-2 3 0 1 0 2 1 1 0-2 0-2 2 0h1c0-2 0-2 1-1 1 2 1 2 2 0h1c0 2 6 2 6 1h1c1 1 13 1 13-1l1 1 1 1h2c2 1 2 1 2-2s0-3-1-2h-1c0-1-7 0-7 2h-1l-3-2c-2 1-3 0-3-1h-1l-2 1c-1-2-2-2-4-1h-7m144 0c0 2 0 2-1 1h-3l-1-1-2 1h-6c-5 0-6 1-8 2-1 2-1 2 1 2l2-2h1c1 2 7 2 7 0h1c1 2 4 3 3 0h1c1 2 2 2 2 1h4l6 1h4c0 2 2 1 4-1l2-1c-1 2 0 2 5 2l6-1h1c1 1 1 0 1-1v-3l-1 1h-11c-8-1-9 0-9 1-1 2-1 2-1 0s0-2-3-2h-5M53 177c0 2 3 3 5 2h17c1 1 5 0 5-1h1l3 1c2 1 2 0 2-2s0-2-1 0c-1 1-1 1-1-1 0-1 0-2-1-1h-2l-3 1-2 1-2-2H59l-3-1c-2 0-3 1-3 3m141-2l-16 1-16 1c0 3 7 3 8 1h2c1-1 1-1 1 1 1 2 1 2 3 1l3-1c1 1 2 0 3-1h2c0 1 4 2 5 1h1l1-1h1l7 1h9l2 1h20c1 1 1 0 1-2l-1-3h-5l-5 1h-1c0-2-3-1-5 1h-1v-2h-2c-1-1-1 0-1 1 0 3-2 3-2 0 0-2-1-3-4-1h-2l-4-1-4 1m-172 2v1l-1-1h-1v1c1 2 7 2 8 0h1l2 1 2 1h2l2-1c1 1 5 0 5-1h1c1 2 7 2 7-1l1 1c1 1 1 1 1-1 0-1-1-2-7-2s-7 1-6 2h-1c-1-1-3-2-9-2-7 0-8 1-7 2\\\' fill=\\\'%23d3d3d3\\\' fill-rule=\\\'evenodd\\\'/%3e%3c/svg%3e\'); background-size: cover; display: block;"\n    ></span>\n    <img\n        class="gatsby-resp-image-image"\n        style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;"\n        alt="lifecycle"\n        title=""\n        src="/static/0307d8376722cf5b0a368df80cf726de/35c67/component-lifecycle.png"\n        srcset="/static/0307d8376722cf5b0a368df80cf726de/7b5b4/component-lifecycle.png 188w,\n/static/0307d8376722cf5b0a368df80cf726de/d266f/component-lifecycle.png 375w,\n/static/0307d8376722cf5b0a368df80cf726de/35c67/component-lifecycle.png 750w,\n/static/0307d8376722cf5b0a368df80cf726de/6b691/component-lifecycle.png 975w"\n        sizes="(max-width: 750px) 100vw, 750px"\n      />\n  </span>\n  </a></p>\n<h2>useEffect</h2>\n<p>React tarjoaa <code class="language-text">useEffect</code>-hookin, jonka avulla voimme suorittaa haluamaamme koodia komponentin eri elinkaaren vaiheissa. <code class="language-text">useEffect</code> ottaa ensimm√§iseksi parametrikseen funktion ja toiseksi listan, joka sis√§lt√§√§ ne muuttujat joiden muutoksia haluamme pit√§√§ silm√§ll√§.<br>\n<br>\nFunktio importoidaan projektiin vastaavasti kuin useState. </p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span>  <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span></code></pre></div>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component mounted!"</span><span class="token punctuation">)</span>   \n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div>\n<p>Koska esimerkiss√§mme hookin toinen parametri on tyhj√§ lista, niin funktiomme suoritetaan vain komponenttimme elinkaaren alussa kerran.</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Value changed!"</span><span class="token punctuation">)</span>   \n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> value <span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div>\n<p>Nyt funktiomme suoritetaan joka kerta kun kuvitteellinen muuttuja <code class="language-text">value</code>, joka voisi olla esimerkiksi prop tai tilamuuttuja, muuttuu.</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component rendered!"</span><span class="token punctuation">)</span>   \n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>\n<p>Voimme my√∂s j√§tt√§√§ toisen parametrin pois. T√§ll√∂in funktiomme kutsutaan joka kerta, kun komponentti render√∂id√§√§n, eli kun jokin asia sen tilassa (props tai state) muuttuu.</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component mounted!"</span><span class="token punctuation">)</span>\n <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component dismounted!"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div>\n<p>Tarvittaessa p√§√§semme my√∂s komponentin elinkaaren viimeiseen vaiheeseen, eli kun komponentti dismountataan. T√§m√§ onnistuu palauttamalla <code class="language-text">useEffect</code>-hookista funktion, joka suoritetaan dismounttauksen yhteydess√§. Nyt esimerkkimme tulostaa komponentin elinkaaren alussa <strong>Component mounted!</strong> ja lopussa <strong>Component dismounted!</strong>.</p>\n<p><strong>Teht√§v√§:</strong> Lis√§√§ effekti, joka suoritetaan silloin, kun <code class="language-text">App</code> render√∂id√§√§n ensimm√§isen kerran</p>\n<p><a href="https://codento.github.io/react-workshop-2/API/">Nyt olemme valmiita vastaanottamaan dataa sovelluksemme ulkopuolelta.</a></p>'}},{node:{fields:{slug:"/API/"},frontmatter:{title:"API"},html:'<h2>Datan haku</h2>\n<p>Seuraavaksi tarvitsemme dataa, jota n√§ytt√§√§ sovelluksessamme. Voimme hakea dataa ns. API:n avulla. API on lyhenne termist√§ <em>Application Programming Interface</em>, eli ohjelmointirajapinnasta. API:en avulla eri ohjelmat voivat olla kesken√§√§n yhteydess√§ esimerkiksi internetin v√§lityksell√§.</p>\n<p>Er√§s meid√§n k√§ytt√∂tarkoitukseemme sopiva API l√∂ytyy osoitteesta <a href="https://koira-api.herokuapp.com/api/v1/dogs">https://koira-api.herokuapp.com/api/v1/dogs</a>. Jos avaamme osoitteen selaimella, niin n√§emme jotain seuraavanlaista:</p>\n<p><img src="https://github.com/codento/react-workshop/raw/master/images/api_data.png" alt="api_data"></p>\n<blockquote>\n<p>APIssa k√§ytetty data (El√§inten nimet ja kuvat) ovat per√§isin <a href="https://rekkurescue.com/">Rekku Rescuesta</a>. Valitsimme kyseisen palvelun datan, koska koemme yhdistyksen tekem√§n ty√∂n t√§rke√§ksi.</p>\n</blockquote>\n<p>N√§ky√§ ei tule s√§ik√§ht√§√§, sill√§ mik√§li formatoimme datan, niin se alkaa n√§ytt√§√§ tutulta:</p>\n<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n        <span class="token property">"id"</span><span class="token operator">:</span><span class="token number">8467</span><span class="token punctuation">,</span>\n        <span class="token property">"url"</span><span class="token operator">:</span><span class="token string">"https://rekkurescue.com/kissat/otto-2/"</span><span class="token punctuation">,</span>\n        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"Otto"</span><span class="token punctuation">,</span>\n        <span class="token property">"imageUrl"</span><span class="token operator">:</span><span class="token string">"https://rekkurescue.com/wp-content/uploads/2019/03/53034501_394709921331043_7096889696600457216_n.jpg"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n        <span class="token property">"id"</span><span class="token operator">:</span><span class="token number">8534</span><span class="token punctuation">,</span>\n        <span class="token property">"url"</span><span class="token operator">:</span><span class="token string">"https://rekkurescue.com/koirat/martta/"</span><span class="token punctuation">,</span>\n        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"Martta"</span><span class="token punctuation">,</span>\n        <span class="token property">"imageUrl"</span><span class="token operator">:</span><span class="token string">"https://rekkurescue.com/wp-content/uploads/2019/03/marttap√§√§-1.jpg"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span></code></pre></div>\n<p>Data on siis muodoltaan JSON:ia. T√§m√§ tarkoittaa siis sit√§, ett√§ JavaScript osaa suoraan k√§sitell√§ kyseist√§ dataa. Nyt meid√§n tarvitsee en√§√§ hakea data sovelluksemme k√§ytt√∂√∂n kyseisest√§ API:sta.</p>\n<p>JavaScript sis√§lt√§√§ funktion <code class="language-text">fetch</code>, jonka avulla voimme tehd√§ HTTP-pyynt√∂j√§ koodistamme k√§sin. Luodaan funktio, joka hakee API:stamme haluamamme JSON datan.</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fetchPets</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> apiUrl <span class="token operator">=</span> <span class="token string">\'https://koira-api.herokuapp.com/api/v1/dogs\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>apiUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>\n<p>Funktio <code class="language-text">fetch</code> on ns. asynkroninen funktio, mik√§ tarkoittaa sit√§, ett√§ sovelluksemme ei odota funktion suorituksen lopettamista. T√§m√§ johtuu siit√§, ett√§ joskus <code class="language-text">fetch</code> voi vied√§ aikaa, emmek√§ halua blokata k√§ytt√∂liittym√§√§ funktion suorituksen ajaksi. N√§in ollen meid√§n tulee kertoa koodillemme, ett√§ odottaa <code class="language-text">fetch</code> funktion palauttamaa arvoa ennen kuin se siirtyy eteenp√§in. T√§m√§ on mahdollista komennolla <code class="language-text">await</code>. Komennon <code class="language-text">await</code> k√§ytt√§minen vaatii, ett√§ funktiomme on asynkroninen. Teimme funktiosta asynkronisen lis√§√§m√§ll√§ termin <code class="language-text">async</code> funktion m√§√§rittelyn alkuun. Muuttuja <code class="language-text">response</code> sis√§lt√§√§ HTTP-pyynt√∂mme vastauksen. K√§ytt√§m√§ll√§ sen funktiota <code class="language-text">.json()</code>, joka on my√∂s asynkroninen, saamme haluamamme datan JSON muodossa. N√§in ollen muuttuja <code class="language-text">data</code> sis√§lt√§√§ hakemamme JSON datan,  joka on lista objekteja. Esimerkiksi <code class="language-text">data[0]</code> palauttaisi objektin, ja <code class="language-text">data[0].imageUrl</code> palauttaisi listan ensimm√§isen objektin <code class="language-text">imageUrl</code> arvon.</p>\n<p>Seuraavaksi meid√§n tulee keksi√§ paikka, miss√§ kutsua juuri tekem√§√§mme funktiota. Sopiva paikka t√§lle voisi olla sellaisessa <code class="language-text">useEffect</code> hookissa, joka suoritetaan vain silloin kuin komponentti render√∂id√§√§n ensimm√§isen kerran.</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">fetchPets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>\n<p><strong>Teht√§v√§:</strong> Lis√§√§ yll√§oleva funktio <code class="language-text">fetchPets</code> <code class="language-text">App</code>-komponenttiin ennen effekti√§. Muokkaa funktiota siten, ett√§ se asettaa muuttujan <code class="language-text">pets</code> arvoksi saamansa datan k√§ytt√§en funktiota <code class="language-text">setPets</code>. Lis√§ksi muokkaa edellisess√§ teht√§v√§ss√§ tekem√§√§si effekti√§ siten, ett√§ siell√§ kutsutaan muokkaamaasi funktiota <code class="language-text">fetchPets</code>.</p>\n<p><strong>Teht√§v√§:</strong> Muokkaa <code class="language-text">Content</code>-komponenttia siten, ett√§ se saa propsina muuttujat <code class="language-text">imageUrl</code> ja <code class="language-text">title</code>. Lis√§ksi muokkaa komponentin rakennetta siten, ett√§ se n√§ytt√§√§ saamiensa propsien avulla lemmikin kuvan <code class="language-text">img</code>-elementill√§, sek√§ lemmikin otsikon <code class="language-text">h2</code>-elementill√§. Rakenna komponentti siten, ett√§ voit k√§ytt√§√§ <code class="language-text">index.css</code> tiedostossa kohdan <code class="language-text">/* STYLES FOR CONTENT: */</code> alapuolella olevia tyylej√§ j√§rkev√§sti. Anna <code class="language-text">Content</code>-komponentille <code class="language-text">App</code>-komponentissa <code class="language-text">pets</code>-taulukon ensimm√§inen arvo. Huomaa, ett√§ <code class="language-text">pets</code> on tyhj√§ siihen asti, kunnes API:mme palauttaa jotakin dataa. Niinp√§ tulee varmistaa, ett√§ listassa on indeksiss√§ <code class="language-text">0</code> dataa, ennen kuin siihen viitataan. T√§m√§ onnistuu esimerkiksi seuraavasti:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>Content imageUrl<span class="token operator">=</span><span class="token punctuation">{</span>pets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> pets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imageUrl<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code></pre></div>\n<p>N√§iden teht√§vien j√§lkeen sovellus n√§ytt√§√§ kutakuinkin t√§lt√§:</p>\n<p><a\n    class="gatsby-resp-image-link"\n    href="/static/b808d5ce331c68ed4d2ef196f480eec7/dbb61/with_content.png"\n    style="display: block"\n    target="_blank"\n    rel="noopener"\n  >\n    <span\n    class="gatsby-resp-image-wrapper"\n    style="position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 650px;"\n  >\n    <span\n      class="gatsby-resp-image-background-image"\n      style="padding-bottom: 57.07692307692308%; position: relative; bottom: 0; left: 0; background-image: url(\'data:image/svg+xml,%3csvg xmlns=\\\'http://www.w3.org/2000/svg\\\' width=\\\'400\\\' height=\\\'228\\\'%3e%3cpath d=\\\'M0 12v11h401V0H0v12m209 33l-5 1-4 2-3 2c-2 1-3 1-2 4 0 3 0 4-2 6s-2 2-1 4c1 1 1 2-2 5l-5 3v2c0-1-2 0-2 2h2l2 3 3 4 2 6v2l-2-1c0-1-3 2-3 4 0 3-3 2-4-2l-3-2-2-1c0-2-3-2-3-1h-2c0-2-1-2-1-1l-1 1-2 2h-4l-1 1c-3 0-4 3-3 7l2 4-3 1c-2 0-3 1-2 2l-1 2v2l3 5 5 5c2 0 3 1 3 2-1 1-1 1 0 0 0-2 2-1 2 1l-1 2v3l-1 3 2 2c4 1 11 0 11-1-1-2 4-3 6-2 3 1 3 0 2-5v-7c1 0 3 16 2 19s0 4 2 3l1-2c1-1 1-1 1 1s6 4 8 2h2l8 1c4 0 7 0 6-1l-2-1h2l2 1 23 1c22 0 22 0 22-2s-1-2-3-2l-3-1-3-1c-2 0-4-2-2-3h2l2-1c2-2-1-3-4-1-2 2-6 3-6 1h-3l-2-1-6-2c-5-2-6-2-4-4l1-2-2 1c-2 2-2 2-5 1l-2-2h2l3-1h-4c-5 0-7-1-5-2 1-1 1-1-1-1-2 1-9-1-9-2h-1c-2 0-2 0-1-4l4-7c5-5 9-18 7-24-2-7 0-11 5-16l2-2-1-3c1-5-3-8-5-4l-2 1 1-3c3-2 2-4 0-7-3-2-10-3-12-2m-9 163v20h200v-40H200v20\\\' fill=\\\'%23d3d3d3\\\' fill-rule=\\\'evenodd\\\'/%3e%3c/svg%3e\'); background-size: cover; display: block;"\n    ></span>\n    <img\n        class="gatsby-resp-image-image"\n        style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;"\n        alt="with_content"\n        title=""\n        src="/static/b808d5ce331c68ed4d2ef196f480eec7/dbb61/with_content.png"\n        srcset="/static/b808d5ce331c68ed4d2ef196f480eec7/7b5b4/with_content.png 188w,\n/static/b808d5ce331c68ed4d2ef196f480eec7/d266f/with_content.png 375w,\n/static/b808d5ce331c68ed4d2ef196f480eec7/dbb61/with_content.png 650w"\n        sizes="(max-width: 650px) 100vw, 650px"\n      />\n  </span>\n  </a></p>\n<h2>Callbackit</h2>\n<p>Komponenteille voidaan v√§litt√§√§ my√∂s callback-funktioita, joilla voidaan suorittaa yl√§komponentin v√§litt√§m√§ funktio alikomponentista. Callbackit ovat hy√∂dyllisi√§ esimerkiksi tiedon v√§litykseen alikomponentilta yl√§komponentille. N√§in voidaan esimerkiksi muuttaa yl√§komponentin tilaa alikomponentissa tapahtuvan toiminnan perusteella. Callbackeja v√§litet√§√§n komponentille kuten propsejakin. Callbackit ovat yleisesti k√§yt√∂ss√§ selaimen k√§ytt√∂liittym√§tapahtumien yhteydess√§.</p>\n<p>Alla on kuvattu komponentti, joka ottaa vastaan count-propsin (joka on automaattisesti alustettu nollaksi) ja joka v√§litt√§√§ count-propsin alikomponentille CallbackComponent. CallbackComponentille v√§litet√§√§n my√∂s funktio incrementCount, jota kutsutaan kun p-elementti√§ klikataan. Kuten propsejakin, my√∂s callbackeja voidaan v√§litt√§√§ useamman komponentin l√§pi.</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> ClickComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span> count<span class="token punctuation">,</span> setCount <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">incrementCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>CallbackComponent count<span class="token operator">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>incrementCount<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> CallbackComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">,</span> onClick <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span><span class="token operator">></span>The component has been clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>\n<p>Callback-funktioille voi my√∂s antaa parametreja. Alla ClickComponent-komponentin incrementCount-funktiolle annetaan parametri increment, jonka arvoksi CallbackComponentissa annetaan 3. Nyt count-arvoon lis√§t√§√§n 3 aina kun elementti√§ p klikataan.</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> ClickComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span> count<span class="token punctuation">,</span> setCount <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">incrementCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">increment</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> increment<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>CallbackComponent count<span class="token operator">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>incrementCount<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> CallbackComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">,</span> onClick <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>The component has been clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>\n<h2>Oma callback</h2>\n<p>Luodaan seuraavaksi callback funktio aikaisemmin tekemillemme <code class="language-text">Button</code> komponenteille. Lis√§t√§√§n komponentille uusi prop <code class="language-text">onClick</code>, joka kuvastaa funktiota, ja asetetaan se komponentin juurielementille.</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> icon<span class="token punctuation">,</span> onClick <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>icon<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>\n<p>Lis√§t√§√§n seuraavaksi <code class="language-text">App</code> komponenttiin funktio <code class="language-text">handleClick</code>:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'clicked!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>\n<p>Voimme nyt antaa luomamme funktion <code class="language-text">Button</code> komponentille, ja aina kun nappia painetaan, niin selaimen konsoliin tulostuu teksti "clicked!". </p>\n<p>Meill√§ on viel√§ kuitenkin yksin ongelma: <code class="language-text">Button</code> komponentit sijaitsevat <code class="language-text">Footer</code> komponentissa, emmek√§ voi suoraan <code class="language-text">App</code> komponentista antaa funktiotamme napeille. Naiivi ratkaisu voisi olla lis√§t√§ my√∂s <code class="language-text">Header</code> komponentille samanlainen prop <code class="language-text">onClick</code> ja laittaa se eteenp√§in eli "passata" napeille. T√§m√§ koituu kuitenkin kohtaloksi, mik√§li haluamme napeille eri <code class="language-text">onClick</code> funktiot. Elegantti ratkaisu olisi se, ett√§ muutamme aluksi <code class="language-text">Footer</code> komponentin rakenteen seuraavanlaiseksi:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">Footer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>footer<span class="token operator">></span>\n      <span class="token punctuation">{</span> children <span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>\n<p>Prop <code class="language-text">children</code> on sellainen prop, joka annetaan jokaiselle komponentille oletuksella. Esimerkiss√§</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>Component1<span class="token operator">></span>\n  <span class="token operator">&lt;</span>Component2 <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Component3 <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Component1<span class="token operator">></span></code></pre></div>\n<p>komponentin <code class="language-text">Component1</code> lapsia ovat <code class="language-text">Component2</code> ja <code class="language-text">Component3</code>. Hy√∂ty t√§ss√§ on se, ett√§ voimme nyt k√§ytt√§√§ footeria <code class="language-text">App</code> komponentissa n√§in:</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>Footer<span class="token operator">></span>\n  <span class="token operator">&lt;</span>Button icon<span class="token operator">=</span><span class="token string">"heart"</span> <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Button icon<span class="token operator">=</span><span class="token string">"heart-broken"</span> <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Footer<span class="token operator">></span></code></pre></div>\n<p>Nyt p√§√§semme suoraan <code class="language-text">App</code> komponentista k√§siksi nappeihin, ja voimme antaa niille suoraan <code class="language-text">onClick</code> funktiot.</p>\n<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>Footer<span class="token operator">></span>\n  <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span> icon<span class="token operator">=</span><span class="token string">"heart-broken"</span> <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span> icon<span class="token operator">=</span><span class="token string">"heart"</span> <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Footer<span class="token operator">></span></code></pre></div>\n<p><strong>Teht√§v√§:</strong> Luo <code class="language-text">App</code>-komponenttiin uusi tilamuuttuja nimelt√§ <code class="language-text">index</code>, jonka alkuarvo on <code class="language-text">0</code>. Lis√§√§ my√∂s funktio <code class="language-text">onClick</code>, joka lis√§√§ muuttujan <code class="language-text">index</code> arvoa yhdell√§. Lis√§ksi muokkaa <code class="language-text">Footer</code>-komponenttia samankaltaisesti kuin yll√§, jotta p√§√§set <code class="language-text">Button</code>-komponentteihin k√§siksi suoraan <code class="language-text">App</code>-komponentista, ja anna napeille prop <code class="language-text">onClick</code>, joka on juuri tekem√§si funktio. Muokkaa my√∂s <code class="language-text">Button</code>-komponentteja siten, ett√§ ne k√§ytt√§v√§t saamaansa <code class="language-text">onClick</code> funktiota, kun niit√§ klikataan. Viimeiseksi muuta <code class="language-text">App</code>-komponenttia viel√§ siten, ett√§ se antaa <code class="language-text">Content</code>-komponentille <code class="language-text">index</code>-muuttujan m√§√§r√§√§m√§n arvon listasta, eik√§ aina listan ensimm√§ist√§ arvoa.</p>\n<p>Teht√§v√§n j√§lkeen sovelluksen tulisi toimia siten, ett√§ aina kun nappia painetaan, niin n√§ytett√§v√§n lemmikin kuva muuttuu.</p>\n<p><a href="https://codento.github.io/react-workshop-2/julkaiseminen/">Nyt voimme julkaista sovelluksen muiden n√§ht√§v√§ksi!</a></p>'}},{node:{fields:{slug:"/julkaiseminen/"},frontmatter:{title:"Julkaiseminen"},html:'<h2>Ohjeet</h2>\n<h3>Git</h3>\n<p>Git on versionhallintaohjelmisto, josta voit lukea lis√§√§ <a href="https://git-scm.com/">t√§√§lt√§</a>. </p>\n<p>Tee seuraavat komennot terminaalissa projektikansiossa:</p>\n<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token keyword">.</span>\n<span class="token function">git</span> commit -m <span class="token string">"Initial commit"</span></code></pre></div>\n<h3>Github</h3>\n<p>GitHub on verkkosivusto, joka tarjoaa paikan Git-versionhallintaa k√§ytt√§ville ohjelmakehitysprojekteille. Git itsess√§√§n on komentoriviohjelma, jolle Github tarjoaa er√§√§n graafisen k√§ytt√∂liittym√§n. Gitin lis√§ksi GitHub tarjoaa projekteille toimintoja kuten bugienseurannan, kehitystoiveet, teht√§vien hallinta ja wiki. L√§hde:  <a href="https://fi.wikipedia.org/wiki/GitHub">Wikipedia</a></p>\n<p>Jos sinulla ei viel√§ ole tunnuksia <a href="https://github.com">Githubiin</a>, luo ne. </p>\n<p>Luo uusi projekti:</p>\n<ol>\n<li>\n<p>Mene <a href="https://github.com">Githubiin</a></p>\n</li>\n<li>\n<p>Vasemmassa reunassa on otsikko "Repositories", jonka vieress√§ on vihre√§ painike "New". Klikkaa sit√§.</p>\n</li>\n<li>\n<p>Seuraavaksi aukeaa t√§llainen n√§kym√§:</p>\n<p><img src="https://raw.githubusercontent.com/codento/react-workshop/master/images/new_repository.png" alt="New repository"></p>\n<ul>\n<li><em>Repository name</em> kohtaan t√§yt√§ nimi projektille. T√§m√§ voi olla sama, kuin tekem√§si React-projektin nimi</li>\n<li><em>Description</em>in voi j√§tt√§√§ tyhj√§ksi</li>\n<li><em>Public</em> / <em>Private</em> -valinnasta valitaan, onko projekti n√§kyviss√§ kaikille, vai vain omistajalleen</li>\n<li><em>Initialize this repository with a README</em> j√§t√§ t√§m√§ valitsematta</li>\n</ul>\n</li>\n<li>\n<p>Klikkaa "Create repository"</p>\n</li>\n</ol>\n<p>T√§m√§n j√§lkeen aukeaa ohjeistus, jonka avulla saat koodisi koneeltasi GitHubiin. Teemme kohdan kaksi, "‚Ä¶or push an existing repository from the command line" mukaisesti, eli kopioi terminaaliin komennot, jotka kyseisen otsikon alta l√∂ytyv√§t.</p>\n<p>P√§ivit√§ t√§m√§n j√§lkeen sivu. Nyt koodin koneeltasi pit√§isi n√§ky√§ t√§ll√§ sivulla. Pid√§ sivu auki, palaamme t√§h√§n hetken kuluttua.</p>\n<h2>Github Pages</h2>\n<p>Avaa editorissa tiedosto <code class="language-text">package.json</code>. Lis√§√§ kohdan </p>\n<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">">0.2%"</span><span class="token punctuation">,</span>\n    <span class="token string">"not dead"</span><span class="token punctuation">,</span>\n    <span class="token string">"not ie &lt;= 11"</span><span class="token punctuation">,</span>\n    <span class="token string">"not op_mini all"</span>\n<span class="token punctuation">]</span></code></pre></div>\n<p>j√§lkeen</p>\n<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">">0.2%"</span><span class="token punctuation">,</span>\n    <span class="token string">"not dead"</span><span class="token punctuation">,</span>\n    <span class="token string">"not ie &lt;= 11"</span><span class="token punctuation">,</span>\n    <span class="token string">"not op_mini all"</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://myusername.github.io/my-app"</span></code></pre></div>\n<p>jossa korvaat <strong>myusername</strong>n omalla Github-tunnuksellasi, sek√§ <strong>my-app</strong>n Github-kohdassa antamallasi projektin nimell√§. </p>\n<p>Asenna <code class="language-text">gh-pages</code> ajamalla terminaalissa</p>\n<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> gh-pages</code></pre></div>\n<p>Muuta <code class="language-text">package.json</code>in kohtaa</p>\n<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"react-scripts start"</span><span class="token punctuation">,</span>\n    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-scripts build"</span><span class="token punctuation">,</span>\n    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"react-scripts test"</span><span class="token punctuation">,</span>\n    <span class="token property">"eject"</span><span class="token operator">:</span> <span class="token string">"react-scripts eject"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></div>\n<p>muotoon:</p>\n<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"predeploy"</span><span class="token operator">:</span> <span class="token string">"npm run build"</span><span class="token punctuation">,</span>\n    <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"gh-pages -d build"</span><span class="token punctuation">,</span>\n    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"react-scripts start"</span><span class="token punctuation">,</span>\n    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-scripts build"</span><span class="token punctuation">,</span>\n    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"react-scripts test"</span><span class="token punctuation">,</span>\n    <span class="token property">"eject"</span><span class="token operator">:</span> <span class="token string">"react-scripts eject"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></div>\n<p>Aja terminaalissa komento</p>\n<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> run deploy</code></pre></div>\n<p>Avaa sivu, joka j√§tettiin auki kohdan "Github" lopussa. Mene v√§lilehdelle "Settings", ja scrollaa kohtaan "GitHub Pages". Varmista, ett√§ Sources-kohdassa on valittuna "gh-pages"-branch. </p>\n<p>Mene osoitteeseen, jonka m√§√§rittelit aikaisemmin kotisivuksi (muotoa "<a href="https://myusername.github.io/my-app%22">https://myusername.github.io/my-app"</a>). Nauti k√§ttesi j√§ljest√§!</p>\n<p>Onneksi olkoon, p√§√§sit materiaalimme loppuun! </p>'}}]}}}},160:function(a,n,s){"use strict";s.r(n);s(34);var t=s(0),e=s.n(t),o=s(4),p=s.n(o),l=s(69),i=s(2),c=function(a){var n=a.location,s=i.default.getResourcesForPathnameSync(n.pathname);return s?e.a.createElement(l.a,Object.assign({location:n,pageResources:s},s.json)):null};c.propTypes={location:p.a.shape({pathname:p.a.string.isRequired}).isRequired},n.default=c},161:function(a,n,s){var t=s(0);function e(a){return t.createElement("svg",a,[t.createElement("defs",{key:0},[t.createElement("style",{key:0},".cls-1{fill:none;}.cls-2{fill:#32266f;}.cls-3{fill:#443c75;}.cls-4{clip-path:url(#clip-path);}.cls-5{fill:#110e38;}.cls-6{fill:#1e1c4b;}.cls-7{fill:#342e79;}.cls-8{fill:#353281;}.cls-9{fill:#fa9654;}.cls-10{fill:#f47d2a;}.cls-11{fill:#c75000;}.cls-12{fill:#b54500;}"),t.createElement("clipPath",{id:"clip-path",key:1},t.createElement("rect",{className:"cls-1",x:"-611.38",y:"-186.02",width:"594.37",height:"398.42",transform:"translate(-628.38 26.38) rotate(-180)"}))]),t.createElement("title",{key:1},"Poly_cettugether_orange"),t.createElement("polygon",{className:"cls-2",points:"141.22 251.26 141.22 249.94 140.27 249.83 141.22 251.26",key:2}),t.createElement("polygon",{className:"cls-3",points:"141.22 250.25 141.22 249.94 140.27 249.83 141.22 250.25",key:3}),t.createElement("g",{className:"cls-4",key:4},[t.createElement("polygon",{className:"cls-5",points:"6 262.43 -200.24 264.55 -138.83 74.45 -15.77 7.17 6 262.43",key:0}),t.createElement("polygon",{className:"cls-6",points:"-200.24 264.55 -23.6 357.85 11.74 178.35 -200.24 264.55",key:1}),t.createElement("polygon",{className:"cls-7",points:"-23.6 357.85 11.74 178.35 162.67 305.89 -23.6 357.85",key:2}),t.createElement("polygon",{className:"cls-8",points:"-138.83 74.45 11.74 178.35 30.85 -18.32 -138.83 74.45",key:3}),t.createElement("polygon",{className:"cls-6",points:"-39.27 199.1 11.74 178.35 -138.83 74.45 -39.27 199.1",key:4}),t.createElement("polygon",{className:"cls-6",points:"-138.83 74.45 -111.73 105.22 30.85 -18.32 -138.83 74.45",key:5}),t.createElement("polygon",{className:"cls-5",points:"-23.6 357.85 -9.69 287.19 12.2 314.38 162.67 305.89 -23.6 357.85",key:6}),t.createElement("polygon",{className:"cls-6",points:"12.2 314.38 11.74 178.35 -23.6 357.85 12.2 314.38",key:7}),t.createElement("polygon",{className:"cls-5",points:"-82.86 80.6 -42.85 124.59 11.74 178.35 -138.83 74.45 -82.86 80.6",key:8})]),t.createElement("polygon",{className:"cls-9",points:"0 172.43 83.32 321.67 4.75 281.06 0 172.43",key:5}),t.createElement("polygon",{className:"cls-10",points:"0 172.43 80.68 139.21 184.03 304.26 0 172.43",key:6}),t.createElement("polygon",{className:"cls-9",points:"80.68 139.21 136.58 75.41 45.35 36.91 80.68 139.21",key:7}),t.createElement("polygon",{className:"cls-10",points:"197.75 0 207.24 109.16 136.58 75.41 197.75 0",key:8}),t.createElement("polygon",{className:"cls-11",points:"159.78 184.03 136.58 75.41 207.24 109.16 159.78 184.03",key:9}),t.createElement("polygon",{className:"cls-10",points:"159.78 184.03 136.58 75.41 80.68 139.21 159.78 184.03",key:10}),t.createElement("polygon",{className:"cls-9",points:"184.03 304.26 159.78 184.03 80.68 139.21 184.03 304.26",key:11}),t.createElement("polygon",{className:"cls-12",points:"207.24 109.16 184.03 304.26 159.78 184.03 207.24 109.16",key:12}),t.createElement("polygon",{className:"cls-12",points:"184.03 304.26 0 172.43 65.46 289.69 184.03 304.26",key:13}),t.createElement("polygon",{className:"cls-10",points:"433.55 172.43 350.23 321.67 428.8 281.06 433.55 172.43",key:14}),t.createElement("polygon",{className:"cls-9",points:"433.55 172.43 352.87 139.21 249.51 304.26 433.55 172.43",key:15}),t.createElement("polygon",{className:"cls-10",points:"352.87 139.21 296.97 75.41 388.2 36.91 352.87 139.21",key:16}),t.createElement("polygon",{className:"cls-9",points:"235.8 0 226.31 109.16 296.97 75.41 235.8 0",key:17}),t.createElement("polygon",{className:"cls-10",points:"273.77 184.03 296.97 75.41 226.31 109.16 273.77 184.03",key:18}),t.createElement("polygon",{className:"cls-11",points:"273.77 184.03 296.97 75.41 352.87 139.21 273.77 184.03",key:19}),t.createElement("polygon",{className:"cls-12",points:"249.51 304.26 273.77 184.03 352.87 139.21 249.51 304.26",key:20}),t.createElement("polygon",{className:"cls-9",points:"226.31 109.16 249.51 304.26 273.77 184.03 226.31 109.16",key:21}),t.createElement("polygon",{className:"cls-12",points:"249.51 304.26 433.55 172.43 368.08 289.69 249.51 304.26",key:22})])}e.defaultProps={id:"Layer_1","data-name":"Layer 1",viewBox:"0 0 433.55 321.67"},a.exports=e,e.default=e},162:function(a){a.exports={data:{site:{siteMetadata:{title:"React Workshop",description:"React Workshop-materiaalit",author:"Codento Oy"}}}}},171:function(a,n,s){a.exports=s.p+"static/icon-533d75bd6d09cbe1608c1840b342d3c6.png"}}]);
//# sourceMappingURL=2-bc6d6555c4b76a425fd4.js.map