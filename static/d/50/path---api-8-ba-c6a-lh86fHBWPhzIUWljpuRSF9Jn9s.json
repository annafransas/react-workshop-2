{"data":{"markdownRemark":{"html":"<h2>Datan haku</h2>\n<p>Seuraavaksi tarvitsemme dataa, jota näyttää sovelluksessamme. Voimme hakea dataa ns. API:n avulla. API on lyhenne termistä <em>Application Programming Interface</em>, eli ohjelmointirajapinnasta. API:en avulla eri ohjelmat voivat olla keskenään yhteydessä esimerkiksi internetin välityksellä.</p>\n<p>Eräs meidän käyttötarkoitukseemme sopiva API löytyy osoitteesta <a href=\"https://koira-api.herokuapp.com/api/v1/dogs\">https://koira-api.herokuapp.com/api/v1/dogs</a>. Jos avaamme osoitteen selaimella, niin näemme jotain seuraavanlaista:</p>\n<p><img src=\"https://github.com/codento/react-workshop/raw/master/images/api_data.png\" alt=\"api_data\"></p>\n<blockquote>\n<p>APIssa käytetty data (Eläinten nimet ja kuvat) ovat peräisin <a href=\"https://rekkurescue.com/\">Rekku Rescuesta</a>. Valitsimme kyseisen palvelun datan, koska koemme yhdistyksen tekemän työn tärkeäksi.</p>\n</blockquote>\n<p>Näkyä ei tule säikähtää, sillä mikäli formatoimme datan, niin se alkaa näyttää tutulta:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">8467</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://rekkurescue.com/kissat/otto-2/\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Otto\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"imageUrl\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://rekkurescue.com/wp-content/uploads/2019/03/53034501_394709921331043_7096889696600457216_n.jpg\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">8534</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://rekkurescue.com/koirat/martta/\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Martta\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"imageUrl\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://rekkurescue.com/wp-content/uploads/2019/03/marttapää-1.jpg\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Data on siis muodoltaan JSON:ia. Tämä tarkoittaa siis sitä, että JavaScript osaa suoraan käsitellä kyseistä dataa. Nyt meidän tarvitsee enää hakea data sovelluksemme käyttöön kyseisestä API:sta.</p>\n<p>JavaScript sisältää funktion <code class=\"language-text\">fetch</code>, jonka avulla voimme tehdä HTTP-pyyntöjä koodistamme käsin. Luodaan funktio, joka hakee API:stamme haluamamme JSON datan.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchPets</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> apiUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://koira-api.herokuapp.com/api/v1/dogs'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>apiUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Funktio <code class=\"language-text\">fetch</code> on ns. asynkroninen funktio, mikä tarkoittaa sitä, että sovelluksemme ei odota funktion suorituksen lopettamista. Tämä johtuu siitä, että joskus <code class=\"language-text\">fetch</code> voi viedä aikaa, emmekä halua blokata käyttöliittymää funktion suorituksen ajaksi. Näin ollen meidän tulee kertoa koodillemme, että odottaa <code class=\"language-text\">fetch</code> funktion palauttamaa arvoa ennen kuin se siirtyy eteenpäin. Tämä on mahdollista komennolla <code class=\"language-text\">await</code>. Komennon <code class=\"language-text\">await</code> käyttäminen vaatii, että funktiomme on asynkroninen. Teimme funktiosta asynkronisen lisäämällä termin <code class=\"language-text\">async</code> funktion määrittelyn alkuun. Muuttuja <code class=\"language-text\">response</code> sisältää HTTP-pyyntömme vastauksen. Käyttämällä sen funktiota <code class=\"language-text\">.json()</code>, joka on myös asynkroninen, saamme haluamamme datan JSON muodossa. Näin ollen muuttuja <code class=\"language-text\">data</code> sisältää hakemamme JSON datan,  joka on lista objekteja. Esimerkiksi <code class=\"language-text\">data[0]</code> palauttaisi objektin, ja <code class=\"language-text\">data[0].imageUrl</code> palauttaisi listan ensimmäisen objektin <code class=\"language-text\">imageUrl</code> arvon.</p>\n<p>Seuraavaksi meidän tulee keksiä paikka, missä kutsua juuri tekemäämme funktiota. Sopiva paikka tälle voisi olla sellaisessa <code class=\"language-text\">useEffect</code> hookissa, joka suoritetaan vain silloin kuin komponentti renderöidään ensimmäisen kerran.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchPets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Tehtävä:</strong> Lisää ylläoleva funktio <code class=\"language-text\">fetchPets</code> <code class=\"language-text\">App</code>-komponenttiin ennen effektiä. Muokkaa funktiota siten, että se asettaa muuttujan <code class=\"language-text\">pets</code> arvoksi saamansa datan käyttäen funktiota <code class=\"language-text\">setPets</code>. Lisäksi muokkaa edellisessä tehtävässä tekemääsi effektiä siten, että siellä kutsutaan muokkaamaasi funktiota <code class=\"language-text\">fetchPets</code>.</p>\n<p><strong>Tehtävä:</strong> Muokkaa <code class=\"language-text\">Content</code>-komponenttia siten, että se saa propsina muuttujat <code class=\"language-text\">imageUrl</code> ja <code class=\"language-text\">title</code>. Lisäksi muokkaa komponentin rakennetta siten, että se näyttää saamiensa propsien avulla lemmikin kuvan <code class=\"language-text\">img</code>-elementillä, sekä lemmikin otsikon <code class=\"language-text\">h2</code>-elementillä. Rakenna komponentti siten, että voit käyttää <code class=\"language-text\">index.css</code> tiedostossa kohdan <code class=\"language-text\">/* STYLES FOR CONTENT: */</code> alapuolella olevia tyylejä järkevästi. Anna <code class=\"language-text\">Content</code>-komponentille <code class=\"language-text\">App</code>-komponentissa <code class=\"language-text\">pets</code>-taulukon ensimmäinen arvo. Huomaa, että <code class=\"language-text\">pets</code> on tyhjä siihen asti, kunnes API:mme palauttaa jotakin dataa. Niinpä tulee varmistaa, että listassa on indeksissä <code class=\"language-text\">0</code> dataa, ennen kuin siihen viitataan. Tämä onnistuu esimerkiksi seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Content imageUrl<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pets<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> pets<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>imageUrl<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>Näiden tehtävien jälkeen sovellus näyttää kutakuinkin tältä:</p>\n<p><a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/b808d5ce331c68ed4d2ef196f480eec7/dbb61/with_content.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-wrapper\"\n    style=\"position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 650px;\"\n  >\n    <span\n      class=\"gatsby-resp-image-background-image\"\n      style=\"padding-bottom: 57.07692307692308%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'400\\' height=\\'228\\'%3e%3cpath d=\\'M0 12v11h401V0H0v12m209 33l-5 1-4 2-3 2c-2 1-3 1-2 4 0 3 0 4-2 6s-2 2-1 4c1 1 1 2-2 5l-5 3v2c0-1-2 0-2 2h2l2 3 3 4 2 6v2l-2-1c0-1-3 2-3 4 0 3-3 2-4-2l-3-2-2-1c0-2-3-2-3-1h-2c0-2-1-2-1-1l-1 1-2 2h-4l-1 1c-3 0-4 3-3 7l2 4-3 1c-2 0-3 1-2 2l-1 2v2l3 5 5 5c2 0 3 1 3 2-1 1-1 1 0 0 0-2 2-1 2 1l-1 2v3l-1 3 2 2c4 1 11 0 11-1-1-2 4-3 6-2 3 1 3 0 2-5v-7c1 0 3 16 2 19s0 4 2 3l1-2c1-1 1-1 1 1s6 4 8 2h2l8 1c4 0 7 0 6-1l-2-1h2l2 1 23 1c22 0 22 0 22-2s-1-2-3-2l-3-1-3-1c-2 0-4-2-2-3h2l2-1c2-2-1-3-4-1-2 2-6 3-6 1h-3l-2-1-6-2c-5-2-6-2-4-4l1-2-2 1c-2 2-2 2-5 1l-2-2h2l3-1h-4c-5 0-7-1-5-2 1-1 1-1-1-1-2 1-9-1-9-2h-1c-2 0-2 0-1-4l4-7c5-5 9-18 7-24-2-7 0-11 5-16l2-2-1-3c1-5-3-8-5-4l-2 1 1-3c3-2 2-4 0-7-3-2-10-3-12-2m-9 163v20h200v-40H200v20\\' fill=\\'%23d3d3d3\\' fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n    ></span>\n    <img\n        class=\"gatsby-resp-image-image\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;\"\n        alt=\"with_content\"\n        title=\"\"\n        src=\"/static/b808d5ce331c68ed4d2ef196f480eec7/dbb61/with_content.png\"\n        srcset=\"/static/b808d5ce331c68ed4d2ef196f480eec7/7b5b4/with_content.png 188w,\n/static/b808d5ce331c68ed4d2ef196f480eec7/d266f/with_content.png 375w,\n/static/b808d5ce331c68ed4d2ef196f480eec7/dbb61/with_content.png 650w\"\n        sizes=\"(max-width: 650px) 100vw, 650px\"\n      />\n  </span>\n  </a></p>\n<h2>Callbackit</h2>\n<p>Komponenteille voidaan välittää myös callback-funktioita, joilla voidaan suorittaa yläkomponentin välittämä funktio alikomponentista. Callbackit ovat hyödyllisiä esimerkiksi tiedon välitykseen alikomponentilta yläkomponentille. Näin voidaan esimerkiksi muuttaa yläkomponentin tilaa alikomponentissa tapahtuvan toiminnan perusteella. Callbackeja välitetään komponentille kuten propsejakin. Callbackit ovat yleisesti käytössä selaimen käyttöliittymätapahtumien yhteydessä.</p>\n<p>Alla on kuvattu komponentti, joka ottaa vastaan count-propsin (joka on automaattisesti alustettu nollaksi) ja joka välittää count-propsin alikomponentille CallbackComponent. CallbackComponentille välitetään myös funktio incrementCount, jota kutsutaan kun p-elementtiä klikataan. Kuten propsejakin, myös callbackeja voidaan välittää useamman komponentin läpi.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ClickComponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> count<span class=\"token punctuation\">,</span> setCount <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incrementCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>CallbackComponent count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>incrementCount<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> CallbackComponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">,</span> onClick <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>The component has been clicked <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> times<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Callback-funktioille voi myös antaa parametreja. Alla ClickComponent-komponentin incrementCount-funktiolle annetaan parametri increment, jonka arvoksi CallbackComponentissa annetaan 3. Nyt count-arvoon lisätään 3 aina kun elementtiä p klikataan.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ClickComponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> count<span class=\"token punctuation\">,</span> setCount <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incrementCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">increment</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> increment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>CallbackComponent count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>incrementCount<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> CallbackComponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">,</span> onClick <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>The component has been clicked <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> times<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Oma callback</h2>\n<p>Luodaan seuraavaksi callback funktio aikaisemmin tekemillemme <code class=\"language-text\">Button</code> komponenteille. Lisätään komponentille uusi prop <code class=\"language-text\">onClick</code>, joka kuvastaa funktiota, ja asetetaan se komponentin juurielementille.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> icon<span class=\"token punctuation\">,</span> onClick <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>icon<span class=\"token punctuation\">}</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lisätään seuraavaksi <code class=\"language-text\">App</code> komponenttiin funktio <code class=\"language-text\">handleClick</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voimme nyt antaa luomamme funktion <code class=\"language-text\">Button</code> komponentille, ja aina kun nappia painetaan, niin selaimen konsoliin tulostuu teksti \"clicked!\". </p>\n<p>Meillä on vielä kuitenkin yksin ongelma: <code class=\"language-text\">Button</code> komponentit sijaitsevat <code class=\"language-text\">Footer</code> komponentissa, emmekä voi suoraan <code class=\"language-text\">App</code> komponentista antaa funktiotamme napeille. Naiivi ratkaisu voisi olla lisätä myös <code class=\"language-text\">Header</code> komponentille samanlainen prop <code class=\"language-text\">onClick</code> ja laittaa se eteenpäin eli \"passata\" napeille. Tämä koituu kuitenkin kohtaloksi, mikäli haluamme napeille eri <code class=\"language-text\">onClick</code> funktiot. Elegantti ratkaisu olisi se, että muutamme aluksi <code class=\"language-text\">Footer</code> komponentin rakenteen seuraavanlaiseksi:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Footer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>footer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>footer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Prop <code class=\"language-text\">children</code> on sellainen prop, joka annetaan jokaiselle komponentille oletuksella. Esimerkissä</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Component1<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Component2 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Component3 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Component1<span class=\"token operator\">></span></code></pre></div>\n<p>komponentin <code class=\"language-text\">Component1</code> lapsia ovat <code class=\"language-text\">Component2</code> ja <code class=\"language-text\">Component3</code>. Hyöty tässä on se, että voimme nyt käyttää footeria <code class=\"language-text\">App</code> komponentissa näin:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Footer<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Button icon<span class=\"token operator\">=</span><span class=\"token string\">\"heart\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Button icon<span class=\"token operator\">=</span><span class=\"token string\">\"heart-broken\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Footer<span class=\"token operator\">></span></code></pre></div>\n<p>Nyt pääsemme suoraan <code class=\"language-text\">App</code> komponentista käsiksi nappeihin, ja voimme antaa niille suoraan <code class=\"language-text\">onClick</code> funktiot.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Footer<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span> icon<span class=\"token operator\">=</span><span class=\"token string\">\"heart-broken\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span> icon<span class=\"token operator\">=</span><span class=\"token string\">\"heart\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Footer<span class=\"token operator\">></span></code></pre></div>\n<p><strong>Tehtävä:</strong> Luo <code class=\"language-text\">App</code>-komponenttiin uusi tilamuuttuja nimeltä <code class=\"language-text\">index</code>, jonka alkuarvo on <code class=\"language-text\">0</code>. Lisää myös funktio <code class=\"language-text\">onClick</code>, joka lisää muuttujan <code class=\"language-text\">index</code> arvoa yhdellä. Lisäksi muokkaa <code class=\"language-text\">Footer</code>-komponenttia samankaltaisesti kuin yllä, jotta pääset <code class=\"language-text\">Button</code>-komponentteihin käsiksi suoraan <code class=\"language-text\">App</code>-komponentista, ja anna napeille prop <code class=\"language-text\">onClick</code>, joka on juuri tekemäsi funktio. Muokkaa myös <code class=\"language-text\">Button</code>-komponentteja siten, että ne käyttävät saamaansa <code class=\"language-text\">onClick</code> funktiota, kun niitä klikataan. Viimeiseksi muuta <code class=\"language-text\">App</code>-komponenttia vielä siten, että se antaa <code class=\"language-text\">Content</code>-komponentille <code class=\"language-text\">index</code>-muuttujan määräämän arvon listasta, eikä aina listan ensimmäistä arvoa.</p>\n<p>Tehtävän jälkeen sovelluksen tulisi toimia siten, että aina kun nappia painetaan, niin näytettävän lemmikin kuva muuttuu.</p>\n<p><a href=\"/react-workshop-2/julkaiseminen/\">Nyt voimme julkaista sovelluksen muiden nähtäväksi!</a></p>","frontmatter":{"title":"API"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/API/"}}