{"data":{"markdownRemark":{"html":"<p>React-sovellukset koostuvat ideaalisti useista pienistä komponenteista, joilla on jokin rajattu vastuualue. Esimerkiksi meillä voisi olla komponentti <code class=\"language-text\">Comments</code>, jonka tehtävä olisi näyttää sivulla johonkin asiaan liittyviä kommentteja, tai sitten komponentti <code class=\"language-text\">Avatar</code>, jonka tehtävä olisi näyttää sille annettu avatari. Kun suunnittelet sovelluksesi toimintaa lähtökohtana on se, että pyrit löytämään ne pienimmät järkevät rakennuspalikat joilla voisit koostaa toimivan kokonaisuuden.</p>\n<p>Komponenttien pienuudessa on seuraavat hyödyt:</p>\n<ul>\n<li>Helppo testata</li>\n<li>Voidaan käyttää uudelleen muualla sovelluksessa (tai jopa kokonaan toisessa sovelluksessa!)</li>\n<li>Helpottaa sovelluksen muuttamista myöhemmin</li>\n<li>Helpottaa komponenttien koodin lukemista</li>\n</ul>\n<p>Kyseessä on kuitenkin tietynlainen tasapainoilu, sillä  joskus liian pienet ja yksityiskohtaiset komponentit monimutkaistavat sovellustasi tarpeettomasti.</p>\n<p>Komponentteihin liittyy monia yksityiskohtia, kuten komponentin elinkaaren hallinta, joka sisältää mm. komponentin alustuksen, eli \"mounttaamisen\", kun komponentti näytetään ensimmäisen kerran ja purkamisen, eli \"dismounttaamisen\", kun komponenttia ei enää näytetä sovelluksessa. Keskitymme nyt alkuun kuitenkin pelkästään komponentin esittämiseen, eli miten React-komponentti saadaan näkymään sovelluksessa.</p>\n<p>Reactissa on kahdenlaisia komponentteja: luokkakomponentteja ja funktiokomponentteja. Luokkakomponentit ovat olleet pitkään suositumpia, sillä ne ovat tarjonneet enemmän toiminnallisuutta kuin funktiokomponentit. Nykyään kuitenkin myös funktiokomponenteilla voi tehdä kaiken saman kuin luokkakomponenteilla, mutta yleensä tehokkaammin. Lisäksi funktiokomponenttien rakenne on yksinkertaisempi ja niitä on helpompi testata. Niinpä niiden suosio on viime aikoina kasvanut, joten suosittelemmekin käyttämään funktiokomponentteja. Huomaa kuitenkin, että Internetin esimerkeissä saattaa tulla myös luokkakomponentteja vastaan.</p>\n<h3>Luokkakomponentit</h3>\n<p>Olemme tutustuneet jo yhteen luokkakomponenttiin: <em>CRA</em> loi valmiin <code class=\"language-text\">App</code>-komponentin, jota olemme ehtineet muokatakin. Komponentti näyttää tältä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        Hei maailma<span class=\"token operator\">!</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Näemme, että komponentti on luokkakomponentti koska komponentti alkaa määrittelyllä <code class=\"language-text\">class App extends Component {</code>. Käytännössä määrittely tarkoittaa sitä, että <code class=\"language-text\">App</code> on luokka, jolla on Reactin itsensä tarjoaman <code class=\"language-text\">Component</code>-luokan toiminnallisuus. <code class=\"language-text\">Component</code>-luokka sisältää paljon esimerkiksi komponentin elinkaareen liittyviä toimintoja, mutta emme esittele niitä tässä sen tarkemmin.</p>\n<p>Tärkein toiminnallisuus joka komponentin on toteutettava on <code class=\"language-text\">render</code>-funktio, joka ylläolevassa <code class=\"language-text\">App</code>-komponentissa palauttaa komponentin sisältämän HTML:n. Tämä komponentin palauttama HTML on se, mikä lopulta näkyy selaimessa.</p>\n<h3>Funktiokomponentit</h3>\n<p>Funktiokomponentit ovat hieman erinäköisiä. Alla oleva esimerkki vastaa nykyistä <code class=\"language-text\">App</code>-luokkakomponenttia, mutta se on kirjoitettu funktiokomponenttina:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      Hei maailma<span class=\"token operator\">!</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">App</code>-komponentin määrittely on muuttunut muotoon <code class=\"language-text\">const App = () =&gt; {</code> ja nyt HTML-sisältö palautuu suoraan komponentista ilman erillistä <code class=\"language-text\">render</code>-funktiota. Lisäksi enää ei tarvitse tuoda <code class=\"language-text\">Component</code>-riippuvuutta, joten ensimmäisellä rivillä tarvitsee enää tuoda ainoastaan itse React. Huomaa, että komponentin palauttama HTML on sulkeiden sisällä.</p>\n<p><code class=\"language-text\">App</code>-komponentin kohdalla luokka- ja funktiokomponenttien ero ei toistaiseksi ole kovin suuri, mutta funktiokomponentti on jonkin verran yksinkertaisempi. Kun komponenttien toiminnallisuus kasvaa niin funktiokomponentit muuttuvat kuitenkin huomattavasti selkeämmiksi.</p>\n<blockquote>\n<p>Yllä sanomme, että komponentit palauttavat HTML:ää; se ei aivan pidä paikkaansa. Komponentit itse asiassa palauttavat JSX:ää, jota käsittelemme tarkemmin myöhemmässä osiossa. Tässä vaiheessa kuitenkin riittää ajatella, että komponentti palauttaa vain HTML:ää.</p>\n</blockquote>\n<p><strong>Tehtävä:</strong> Tee sovelluksesi <code class=\"language-text\">App</code>-komponentista funktiokomponentti kuten yllä.</p>\n<h2>Ensimmäiset omat komponentit</h2>\n<p>Seuraavaksi luodaan kokonaan uusia komponentteja. Haluamme antaa sovelluksemme seuraavannäköisen rakenteen:</p>\n<p><a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/773b1c1fa3492cc51d978b8951c66e71/bcefc/structure.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-wrapper\"\n    style=\"position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 750px;\"\n  >\n    <span\n      class=\"gatsby-resp-image-background-image\"\n      style=\"padding-bottom: 122.15619694397284%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'400\\' height=\\'489\\'%3e%3cpath d=\\'M154 20l105 5a8945 8945 0 0 1-105-5m-35 27c-2 6-2 6-2 26v27l1 7h-12l-11 1h23v4a6217 6217 0 0 0 3 102v7h-8l-8 1 8 1h8v5a1677 1677 0 0 1 4 102v13h-12c-9 0-13 0-12 1l12 1h12v12a678 678 0 0 1 1 1v-13h15v11l1 12h92l94 1 3-276V81H140v25l1-12 1-11 94-1h94v9a59813 59813 0 0 1-3 267v10l-92-1h-92v-18l3-2c5-3 5-3 0-6l-4-2V227l4-2 4-2 1 29c0 32 1 40 6 51 6 11-1 10 80 10h71l4-4c5-4 8-11 10-22 1-9 4-97 3-115-1-17-5-31-12-37l-3-3-73 6-72 6-3 3c-8 7-11 20-11 51l-1 23-4-2-4-2v-94l2 1c5 2 175 3 179 2 5-2 5-4 4-20-1-15-2-16-7-17-4-1-162-1-171 1-5 0-6 1-7 10v7l-5-2c-5-4-6-4-2 0l3 2h-19V95c-2-27-1-41 2-47l2-6-4 5m234 37c1 153 2 316 1 319v4l1-3a18115 18115 0 0 0-2-320m-166 7c-33 0-41 1-42 2-1 2-2 27 0 29s175 4 179 2l2-2v-12c-1-16-2-18-5-19H187m-68 19a11253 11253 0 0 0 3 102v9h19v-56a1020 1020 0 0 1 1-56c0-2-1-1-5 1l-5 2c0-1 1-2 3-2 2-2 2-2-7-2s-9 0-9 2m113 30c-54 4-66 6-68 7-4 2-8 11-9 20-3 10-3 112-1 122 2 9 6 17 9 20l3 2h71c81 0 74 1 78-9 5-10 6-18 7-60 2-60 2-74 0-83-3-11-6-18-9-22s-1-4-81 3M124 264l2 60v19h15V223h-18l1 41m99 59c-70 1-70 1-71 5s-2 31-1 32l3 2c2 1 157 4 160 2 5-2 6-4 5-21-2-20-2-21-21-21l-75 1m-12 2c-47 0-55 1-56 2-3 2-4 31-2 33 2 1 156 4 160 3 5-1 5-4 4-20l-3-17c-1-2-17-2-103-1m27 65c-9 4-15 13-13 19 3 8 25 10 33 2 5-4 4-11-2-17-5-6-10-7-18-4m-93 44a6155 6155 0 0 0 182 4 3825 3825 0 0 1-181-4\\' fill=\\'%23d3d3d3\\' fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n    ></span>\n    <img\n        class=\"gatsby-resp-image-image\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;\"\n        alt=\"structure\"\n        title=\"\"\n        src=\"/static/773b1c1fa3492cc51d978b8951c66e71/35c67/structure.png\"\n        srcset=\"/static/773b1c1fa3492cc51d978b8951c66e71/7b5b4/structure.png 188w,\n/static/773b1c1fa3492cc51d978b8951c66e71/d266f/structure.png 375w,\n/static/773b1c1fa3492cc51d978b8951c66e71/35c67/structure.png 750w,\n/static/773b1c1fa3492cc51d978b8951c66e71/1568d/structure.png 1125w,\n/static/773b1c1fa3492cc51d978b8951c66e71/bcefc/structure.png 1178w\"\n        sizes=\"(max-width: 750px) 100vw, 750px\"\n      />\n  </span>\n  </a></p>\n<p>Muutetaan sovellusta siten, että sovelluksessa on omat komponentit otsakkeelle, sisällölle, ja sivun alalaidalle.</p>\n<h3>Sovelluksen sisältö</h3>\n<p>Tällä hetkellä sovellus ei tee muuta kuin näyttää tekstin <em>Hei maailma!</em>. Luodaan sovellukseen uusi komponentti, joka tulee sisältämään sovelluksen pääasiallisen sisällön. Luo hakemistoon <code class=\"language-text\">src/</code> uusi tiedosto nimeltä <code class=\"language-text\">Content.js</code>. Komponentin sisältö voisi näyttää esimerkiksi tältä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Content</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>main<span class=\"token operator\">></span>\n      Sisältö\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Content<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Huomaa komponentin viimeinen rivi <code class=\"language-text\">export default</code>. Jotta sovelluksessa voidaan käyttää komponenttia, on aina muistettava lisätä tämä viimeinen rivi, joka \"vie\" luodun komponentin sovelluksen muiden osien käyttöön.</p>\n</blockquote>\n<p>Yllä olemme luoneet <code class=\"language-text\">Content</code>-nimisen komponentin, joka ei vielä tee muuta kuin palauttaa tekstin <em>Sisältö</em>. Teksti on lisätty HTML-elementin <code class=\"language-text\">&lt;main&gt;</code> sisälle, sillä kyseessä on sovelluksemme \"pääsisältö\". Komponentti on funktiokomponentti, joten tiedoston alussa tarvitsee ainoastaan tuoda komponentin riippuvuutena React. <code class=\"language-text\">Content</code>-komponentti muistuttaa hyvin paljon <code class=\"language-text\">App</code>-komponenttia, sillä kummassakaan ei ole vielä paljoa toiminnallisuutta.</p>\n<p>Komponentti ei kuitenkaan vielä näy missään, vaan se on lisättävä sovellukseen. Tällä hetkellä meillä ei ole kuin <code class=\"language-text\">App</code>-komponentti, joten lisätään komponentti sinne. Jotta uutta <code class=\"language-text\">Content</code>-komponenttia voitaisiin käyttää <code class=\"language-text\">App</code>-komponentissa, se on tuotava erikseen <code class=\"language-text\">App</code>-komponentin käyttöön kuten Reactkin.</p>\n<p>Lisätään rivi <code class=\"language-text\">import Content from &#39;./Content&#39;;</code> heti rivin <code class=\"language-text\">import React from &#39;react&#39;;</code> jälkeen. Korvataan samalla <code class=\"language-text\">App</code>-komponentissa teksti <em>Hei maailma!</em> uudella <code class=\"language-text\">Content</code>-komponentillamme. <code class=\"language-text\">App</code>-komponentti näyttää muutosten jälkeen tältä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Content <span class=\"token keyword\">from</span> <span class=\"token string\">'./Content'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Content <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Jotta voimme käyttää komponentteja muissa komponenteissa, on meidän aina erikseen muistettava tuoda komponentti <code class=\"language-text\">import</code>-lauseella. Yllä tuontilause alkaa <code class=\"language-text\">import Content</code>, koska exporttaamme <em>Content.js</em> tiedostossa komponentin nimeltä <code class=\"language-text\">Content</code>. Tuontilause loppuu <code class=\"language-text\">from &#39;./Content&#39;</code>, koska tiedoston nimi on <em>Content.js</em>. Tuontilauseet ovat siis muotoa <code class=\"language-text\">import komponentin_nimi from &#39;komponentin_tiedosto&#39;</code>. Kun tuotava tiedosto päättyy <em>.js</em>, niin päätettä ei tarvitse kirjoittaa.</p>\n</blockquote>\n<p>Huomaa, että sovelluksen komponentit ovat kääritty yhden div-elementin sisään:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">...</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>React vaatii, että komponentti palauttaa maksimissaan yhden juurikomponentin. Näin ollen mikäli haluamme palauttaa enemmän kuin yhden komponentin, niin ne tulee kääriä yhden juurikomponentin sisään:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>Component1 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>Component2 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p><strong>Tehtävä:</strong> Luo funktionaaliset komponentit <code class=\"language-text\">Header</code> ja <code class=\"language-text\">Footer</code> omiin tiedostoihinsa <code class=\"language-text\">Header.js</code> ja <code class=\"language-text\">Footer.js</code>. <code class=\"language-text\">Header</code>-komponentin pitäisi palauttaa HTML-elementti <code class=\"language-text\">&lt;header&gt;</code> joka sisältää tekstin <em>Otsake</em> ja <code class=\"language-text\">Footer</code>-komponentin tulisi palauttaa HTML-elementin <code class=\"language-text\">&lt;footer&gt;</code>, joka sisältää tekstin <em>Alalaita</em>. Muokkaa myös <code class=\"language-text\">App</code>-komponenttia siten, että juuri luomasi komponentit näkyvät oikeissa paikoissa.</p>\n<p>Kun tehtävät on suoritettu, sovelluksen pitäisi näyttää suunnilleen tältä:</p>\n<p><a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/61372c6a85c3ac17d1aaad749e352c27/6cc13/structure_without_styles.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-wrapper\"\n    style=\"position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 750px;\"\n  >\n    <span\n      class=\"gatsby-resp-image-background-image\"\n      style=\"padding-bottom: 32.024432809773124%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'400\\' height=\\'128\\'%3e%3cpath d=\\'M0 4v3h401V0H0v4\\' fill=\\'%23d3d3d3\\' fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n    ></span>\n    <img\n        class=\"gatsby-resp-image-image\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;\"\n        alt=\"structure_without_styles\"\n        title=\"\"\n        src=\"/static/61372c6a85c3ac17d1aaad749e352c27/35c67/structure_without_styles.png\"\n        srcset=\"/static/61372c6a85c3ac17d1aaad749e352c27/7b5b4/structure_without_styles.png 188w,\n/static/61372c6a85c3ac17d1aaad749e352c27/d266f/structure_without_styles.png 375w,\n/static/61372c6a85c3ac17d1aaad749e352c27/35c67/structure_without_styles.png 750w,\n/static/61372c6a85c3ac17d1aaad749e352c27/1568d/structure_without_styles.png 1125w,\n/static/61372c6a85c3ac17d1aaad749e352c27/6cc13/structure_without_styles.png 1146w\"\n        sizes=\"(max-width: 750px) 100vw, 750px\"\n      />\n  </span>\n  </a></p>\n<p>Sovellus on vielä toistaiseksi melko karun näköinen. <a href=\"http://localhost:8000tyylit/\">Lisätään sovellukseen seuraavaksi hieman tyyliä.</a></p>","frontmatter":{"title":"Reactin komponentit"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/contents/komponentit/"}}