{"data":{"markdownRemark":{"html":"<h1>Komponenttien elinkaari</h1>\n<p>Jokaisella React komponentilla on elinkaari, joka alkaa siitä hetkestä, kun komponentti ensimmäisen kerran ilmestyy näytölle eli \"mountataan\" ja päättyy siihen, kun komponentti katoaa näytöltä eli \"dismountataan\". Näiden välissä oleellisia elinkaaren vaiheita ovat komponentin tilanmuutokset, eli kun komponentti saa ulkopuolelta uusia propseja tai kun sen sisäinen tila (state) muuttuu. Lähtökohtaisesti aina kun komponenttiin kohdistuu tilanmuutos, se piirrettään, eli \"renderöidään\" näytölle uudelleen, jotta esimerkiksi propsina saadut muutokset näkyvät näytöllä.</p>\n<p><img src=\"https://github.com/codento/react-workshop-2/blob/master/images/component-lifecycle.png\" alt=\"lifecycle\"></p>\n<h2>useEffect</h2>\n<p>React tarjoaa <code class=\"language-text\">useEffect</code>-funktion, jonka avulla voimme suorittaa haluamaamme koodia komponentin eri elinkaaren vaiheissa. <code class=\"language-text\">useEffect</code>-funktio ottaa vastaan parametrinaan funktion ja listan muuttujia. <code class=\"language-text\">useEffect</code> pitää silmällä sille listassa annettuja muuttujia ja aina, kun listassa annettu muuttuja muuttuu <code class=\"language-text\">useEffect</code>ille annettu funktio suoritetaan. Jos muuttujalista on tyhjä, funktio suoritetaan vain kerran komponentin  elinkaaren alussa (eli kun se näytetään selaimessa ensimmäisen kerran). Esimerkki valaisee <code class=\"language-text\">useEffectin</code>toimintaa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span>  <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Component mounted!\"</span><span class=\"token punctuation\">)</span>   \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">useEffect</code> importoidaan projektiin vastaavasti kuin useState. Koska esimerkissämme <code class=\"language-text\">useEffectin</code> toinen parametri on tyhjä lista, niin funktio suoritetaan vain komponentin elinkaaren alussa. Ylläoleva <code class=\"language-text\">useEffect</code> siis lokittaa 'Component mounted' kun sivu latautuu ensimmäisen kerran.</p>\n<p>Jos <code class=\"language-text\">useEffect</code>ille antaa listassa muuttujan, funktio suoritetaan aina (ja vain) silloin kun muuttujan arvo muuttuu:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value changed!\"</span><span class=\"token punctuation\">)</span>   \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> value <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ylläoleva <code class=\"language-text\">useEffect</code> siis lokittaa 'Value changed', kun muuttujan <code class=\"language-text\">value</code> arvo muuttuu. </p>\n<p>Voimme myös jättää toisen parametrin pois. Tällöin funktiomme kutsutaan joka kerta, kun komponentti renderöidään, eli kun mikä tahansa asia sen tilassa (props tai state) muuttuu, kuten alla:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Component rendered!\"</span><span class=\"token punctuation\">)</span>   \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Tarvittaessa pääsemme myös komponentin elinkaaren viimeiseen vaiheeseen, eli kun komponentti dismountataan ja se poistuu näkyvistä. Tämä onnistuu palauttamalla <code class=\"language-text\">useEffect</code>-hookista funktion, joka suoritetaan dismounttauksen yhteydessä. Alla esimerkkimme tulostaa komponentin elinkaaren alussa <strong>Component mounted!</strong> ja lopussa <strong>Component dismounted!</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Component mounted!\"</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Component dismounted!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Tehtävä:</strong> Lisää <code class=\"language-text\">App</code>-komponenttiin <code class=\"language-text\">useEffect</code>-funktio, joka suoritetaan silloin, kun <code class=\"language-text\">App</code>-komponentti renderöidään ensimmäisen kerran. Parametrina annettu funktio voisi vaikka lokittaa jotain, kuten yllä. <code class=\"language-text\">useEffect</code>-funktion voi lisätä heti aiemmin lisäämäsi <code class=\"language-text\">useState</code>-funktion jälkeen.</p>\n<p><a href=\"https://github.com/codento/react-workshop-2/wiki/API\">Nyt olemme valmiita vastaanottamaan dataa sovelluksemme ulkopuolelta.</a></p>\n<p>Sovellus on vielä toistaiseksi melko karun näköinen. <a href=\"/tyylit/\">Lisätään sovellukseen seuraavaksi hieman tyyliä.</a></p>","frontmatter":{"title":"Reactin komponentit"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/komponentit/"}}