{"data":{"markdownRemark":{"html":"<p>React-sovellukset koostuvat ideaalisti useista pienistä komponenteista, joilla on jokin rajattu vastuualue. Esimerkiksi meillä voisi olla komponentti <code class=\"language-text\">Comments</code>, jonka tehtävä olisi näyttää sivulla johonkin asiaan liittyviä kommentteja, tai sitten komponentti <code class=\"language-text\">Avatar</code>, jonka tehtävä olisi näyttää sille annettu avatari. Kun suunnittelet sovelluksesi toimintaa lähtökohtana on se, että pyrit löytämään ne pienimmät järkevät rakennuspalikat joilla voisit koostaa toimivan kokonaisuuden.</p>\n<p>Komponenttien pienuudessa on seuraavat hyödyt:</p>\n<ul>\n<li>Helppo testata</li>\n<li>Voidaan käyttää uudelleen muualla sovelluksessa (tai jopa toisessa sovelluksessa!)</li>\n<li>Helpottaa sovelluksen muuttamista myöhemmin</li>\n<li>Helpottaa komponenttien koodin lukemista</li>\n</ul>\n<p>Kyseessä on kuitenkin tietynlainen tasapainoilu, sillä  joskus liian pienet ja yksityiskohtaiset komponentit monimutkaistavat sovellustasi tarpeettomasti.</p>\n<p>Komponentteihin liittyy monia yksityiskohtia, kuten komponentin elinkaaren hallinta, joka sisältää mm. komponentin alustuksen, eli \"mounttaamisen\", kun komponentti näytetään ensimmäisen kerran ja purkamisen, eli \"dismounttaamisen\", kun komponenttia ei enää näytetä sovelluksessa. Keskitymme nyt alkuun kuitenkin pelkästään komponentin esittämiseen, eli miten React-komponentti ylipäätään saadaan näkymään sovelluksessa.</p>\n<p>Reactissa on kahdenlaisia komponentteja: luokkakomponentteja ja funktiokomponentteja. Luokkakomponentit ovat olleet pitkään suositumpia, sillä ne ovat tarjonneet enemmän toiminnallisuutta kuin funktiokomponentit. Nykyään kuitenkin myös funktiokomponenteilla voi tehdä kaiken saman kuin luokkakomponenteilla, mutta yleensä tehokkaammin. Lisäksi funktiokomponenttien rakenne on yksinkertaisempi ja niitä on helpompi testata. Niinpä niiden suosio on viime aikoina kasvanut, joten suosittelemmekin käyttämään funktiokomponentteja. Huomaa kuitenkin, että Internetin esimerkeissä saattaa tulla myös luokkakomponentteja vastaan.</p>\n<h2>Luokkakomponentit</h2>\n<p>Emme tutustu sen tarkemmin luokkakomponentteihin, mutta mikäli muuttaisimme <em>CRA</em>:n luoman funktiokomponentin luokkakomponentiksi, se näyttäisi suunnilleen tältä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        Hei maailma<span class=\"token operator\">!</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Näemme, että komponentti on luokkakomponentti, koska komponentti alkaa määrittelyllä <code class=\"language-text\">class App extends Component {</code>. Käytännössä määrittely tarkoittaa sitä, että <code class=\"language-text\">App</code> on luokka, jolla on Reactin tarjoaman <code class=\"language-text\">Component</code>-luokan toiminnallisuuksia. <code class=\"language-text\">Component</code>-luokka sisältää paljon esimerkiksi komponentin elinkaareen liittyviä toimintoja, mutta emme esittele niitä tässä sen tarkemmin.</p>\n<p>Tärkein toiminnallisuus, joka komponentin on toteutettava, on <code class=\"language-text\">render</code>-funktio, joka ylläolevassa <code class=\"language-text\">App</code>-komponentissa palauttaa komponentin sisältämän HTML:n. Tämä komponentin palauttama HTML on se, mikä lopulta näkyy selaimessa.</p>\n<h2>Funktiokomponentit</h2>\n<p>Olemme tutustuneet jo yhteen funktiokomponenttiin: <em>CRA</em> loi valmiin <code class=\"language-text\">App</code>-komponentin, jota olemme ehtineet muokatakin. Komponentti näyttää siis tältä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      Hei maailma<span class=\"token operator\">!</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Verrattuna luokkakomponentteihin funktiokomponentit palauttavat komponentin HTML-sisällön suoraan komponentista ilman erillistä <code class=\"language-text\">render</code>-funktiota. Lisäksi enää ei tarvitse tuoda <code class=\"language-text\">Component</code>-riippuvuutta, joten ensimmäisellä rivillä tarvitsee enää tuoda ainoastaan itse React. Huomaa, että komponentin palauttama HTML on sulkeiden sisällä (<code class=\"language-text\">return ( ... )</code>).</p>\n<p>Funktiokomponentit voidaan luoda myös hieman eri tavalla, seuraavalla syntaksilla:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      Hei maailma<span class=\"token operator\">!</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">App</code>-komponentin määrittely on siis muuttunut muotoon <code class=\"language-text\">const App = () =&gt; {</code>, joka on modernimpaa JavaScriptia.</p>\n<p><code class=\"language-text\">App</code>-komponenttimme kohdalla luokka- ja funktiokomponenttien ero ei toistaiseksi ole kovin suuri, mutta funktiokomponentti on jonkin verran yksinkertaisempi. Kun komponenttien toiminnallisuus kasvaa, niin funktiokomponentit muuttuvat huomattavasti selkeämmiksi.</p>\n<blockquote>\n<p>Yllä sanomme, että komponentit palauttavat HTML:ää; se ei aivan pidä paikkaansa. Komponentit itse asiassa palauttavat JSX:ää, jota käsittelemme hieman tarkemmin myöhemmässä osiossa. Tässä vaiheessa kuitenkin riittää ajatella, että komponentti palauttaa vain HTML:ää.</p>\n</blockquote>\n<p><strong>Tehtävä:</strong> Muuta <code class=\"language-text\">App</code> komponentti käyttämään yllä esitettyä jälkimmäistä syntaksia <code class=\"language-text\">const App = () =&gt; {</code>.</p>\n<h1>Ensimmäiset omat komponentit</h1>\n<p>Seuraavaksi luodaan kokonaan uusia komponentteja. Haluamme antaa sovelluksemme seuraavannäköisen rakenteen:</p>\n<p><img src=\"/images/structure.png\" alt=\"structure\"></p>\n<p>Muutetaan sovellusta siten, että sovelluksessa on omat komponentit otsakkeelle, sisällölle, ja sivun alalaidalle.</p>\n<h2>Sovelluksen sisältö</h2>\n<p>Tällä hetkellä sovellus ei tee muuta kuin näyttää tekstin <em>Hei maailma!</em>. Luodaan sovellukseen uusi komponentti, joka tulee sisältämään sovelluksen pääasiallisen sisällön. Luo hakemistoon <code class=\"language-text\">src/</code> uusi tiedosto nimeltä <code class=\"language-text\">Content.js</code>. Komponentin sisältö voisi näyttää esimerkiksi tältä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Content</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>main<span class=\"token operator\">></span>\n      Sisältö\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Content<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Huomaa komponentin viimeinen rivi <code class=\"language-text\">export default</code>. Jotta sovelluksessa voidaan käyttää komponenttia, on aina muistettava lisätä tämä viimeinen rivi, joka \"vie\" luodun komponentin sovelluksen muiden osien käyttöön.</p>\n</blockquote>\n<p>Yllä olemme luoneet <code class=\"language-text\">Content</code>-nimisen komponentin, joka ei vielä tee muuta kuin palauttaa tekstin <em>Sisältö</em>. Teksti on lisätty HTML-elementin <code class=\"language-text\">&lt;main&gt;</code> sisälle, sillä kyseessä on sovelluksemme \"pääsisältö\". Komponentti on funktiokomponentti, joten tiedoston alussa tarvitsee ainoastaan tuoda komponentin riippuvuutena React. <code class=\"language-text\">Content</code>-komponentti muistuttaa hyvin paljon <code class=\"language-text\">App</code>-komponenttia, sillä kummassakaan ei ole vielä paljoa toiminnallisuutta.\n<code class=\"language-text\">const App = () =&gt; {</code>\nKomponentti ei kuitenkaan vielä näy missään, vaan se on lisättävä sovellukseen. Tällä hetkellä meillä ei ole kuin <code class=\"language-text\">App</code>-komponentti, joten lisätään komponentti sinne. Jotta uutta <code class=\"language-text\">Content</code>-komponenttia voitaisiin käyttää <code class=\"language-text\">App</code>-komponentissa, se on tuotava erikseen <code class=\"language-text\">App</code>-komponentin käyttöön kuten Reactkin.</p>\n<p>Lisätään rivi <code class=\"language-text\">import Content from &#39;./Content&#39;;</code> heti rivin <code class=\"language-text\">import React from &#39;react&#39;;</code> jälkeen. Korvataan samalla <code class=\"language-text\">App</code>-komponentissa teksti <em>Hei maailma!</em> uudella <code class=\"language-text\">Content</code>-komponentillamme. <code class=\"language-text\">App</code>-komponentti näyttää muutosten jälkeen tältä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Content <span class=\"token keyword\">from</span> <span class=\"token string\">'./Content'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Content <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Jotta voimme käyttää komponentteja muissa komponenteissa, on meidän aina erikseen muistettava tuoda komponentti <code class=\"language-text\">import</code>-lauseella. Yllä tuontilause alkaa <code class=\"language-text\">import Content</code>, koska tuotavan komponentin nimi on <code class=\"language-text\">Content</code>. Tuontilause loppuu <code class=\"language-text\">from &#39;./Content&#39;</code>, koska tiedoston nimi jossa komponentti sijaitsee on <em>Content.js</em>. Tuontilauseet ovat siis muotoa <code class=\"language-text\">import komponentin_nimi from &#39;komponentin_tiedosto&#39;</code>. Kun tuotava tiedosto päättyy <em>.js</em>, niin päätettä ei kirjoiteta.</p>\n</blockquote>\n<p>Huomaa, että React vaatii että sovelluksen komponentit ovat yhden \"juurielementin\" sisällä. Esimerkiksi yllä <code class=\"language-text\">App</code>-komponentin sisältö on kääritty yhden div-elementin sisään <code class=\"language-text\">&lt;div className=&quot;App&quot;&gt;</code>. Mikäli haluamme palauttaa komponentista useamman kuin yhden komponentin, niiden on oltava yhteisen juurikomponentin sisällä:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>Component1 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>Component2 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p><strong>Tehtävä:</strong> Luo funktionaalinen komponentti <code class=\"language-text\">Header</code> tiedostoon <code class=\"language-text\">Header.js</code> (<code class=\"language-text\">src</code>-hakemistoon). <code class=\"language-text\">Header</code>-komponentin pitäisi palauttaa HTML-elementti <code class=\"language-text\">&lt;header&gt;</code> joka sisältää tekstin <em>Otsake</em>. Lisää <code class=\"language-text\">Header</code>-komponentti <code class=\"language-text\">App</code>-komponenttiin ennen <code class=\"language-text\">Content</code>-komponenttia.</p>\n<p><strong>Tehtävä:</strong> Luo funktionaalinen komponentti <code class=\"language-text\">Footer</code> tiedostoon <code class=\"language-text\">Footer.js</code> (<code class=\"language-text\">src</code>-hakemistoon). <code class=\"language-text\">Footer</code>-komponentin pitäisi palauttaa HTML-elementti <code class=\"language-text\">&lt;footer&gt;</code> joka sisältää tekstin <em>Alalaita</em>. Lisää <code class=\"language-text\">Footer</code>-komponentti <code class=\"language-text\">App</code>-komponenttiin <code class=\"language-text\">Content</code>-komponentin jälkeen.</p>\n<p>Kun tehtävät on suoritettu, sovelluksen pitäisi näyttää suunnilleen tältä:</p>\n<p><img src=\"/images/structure_without_styles.png\" alt=\"structure_without_styles\"></p>\n<p>Sovellus on vielä toistaiseksi melko karun näköinen. <a href=\"/react-workshop-2/tyylit/\">Lisätään sovellukseen seuraavaksi hieman tyyliä.</a></p>","frontmatter":{"title":"Reactin komponentit"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/komponentit/"}}