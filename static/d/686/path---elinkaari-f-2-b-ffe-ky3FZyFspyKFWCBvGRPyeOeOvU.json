{"data":{"markdownRemark":{"html":"<h1>Komponenttien elinkaari</h1>\n<p>Jokaisella React komponentilla on elinkaari, joka alkaa siitä hetkestä, kun komponentti ensimmäisen kerran ilmestyy näytölle eli \"mountataan\" ja päättyy siihen, kun komponentti katoaa näytöltä eli \"dismountataan\". Näiden välissä oleellisia elinkaaren vaiheita ovat komponentin tilanmuutokset, eli kun komponentti saa ulkopuolelta uusia propseja tai sitten sen sisäinen tila muuttuu. Lähtökohtaisesti aina kun komponenttiin kohdistuu tilanmuutos, se piirrettään, eli \"renderöidään\" näytölle uudelleen, jotta esimerkiksi propsina saadut muutokset näkyvät näytöllä.</p>\n<p><a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/0307d8376722cf5b0a368df80cf726de/6b691/component-lifecycle.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-wrapper\"\n    style=\"position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 750px;\"\n  >\n    <span\n      class=\"gatsby-resp-image-background-image\"\n      style=\"padding-bottom: 51.48717948717949%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'400\\' height=\\'206\\'%3e%3cpath d=\\'M13 16c-4 6-1 12 6 12l4-2 1-2 1 2c1 2 6 3 8 0h2c0 2 1 2 9 2h9l-1-4v-5c-1-2-17-1-17 1h-1c-2-3-8-2-9 1l-4 1-2 1-1 2-1-4 1-4 1 2 2 1c2 0 2-1 2-3-1-4-8-4-10-1m112 5v7h11l12-1h1c2 2 8 1 9 0 0-2 0-2 2 0l4 1c4-1 5-3 2-3-2 0-3-1-3-2 0-3 5-2 6 1 0 3 1 4 3 4 2 1 2 1 0 1-4 0-3 2 1 3 3 0 6-2 6-6 0-2 0-2 2 0 2 3 14 3 14 0l-1-7c0-5 0-5-2-5-3 0-3 0-2 6v5h-3c-2 0-3 0-3-2s0-2 3-1c2 0 2 0 2-2-1-3-8-3-9 1-1 1-1 1-1-1 0-1-1-2-3-2s-2 0-1 4l-1 3-1-3v-4h-6c-5 0-7 0-8 2h-2c-1-2-6-3-8-1h-1v-2l1-1c0-3-5-2-6 0-1 1-2 3-1 6l-1 3-1-3c0-4 0-4-3-4-2 0-2 0-2 4v2l-2-1-2 1c-1 1-1-1-1-4l1-6h-6v7m-71 4v7h2c3 0 3 0 3-2-1-2-1-3 2-2 2 0 2 0 3-2v-2l2 2c3 4 9 2 9-3s-6-7-9-3c-2 2-2 2-2 0-1-1-2-2-6-2h-4v7m22-2v5h6l6-1h1l11 1h10l-1-4-1-5H97c-3-3-9-1-9 4 0 2 0 3-1 2-1-7-1-7-6-7h-5v5m126 35c-3 2-2 2 1 5h2c-1-2-1-2 2-1 2 1 3 6 0 8-2 2-6 0-7-4-1-3-2-4-3-1-1 4 4 9 8 9 3 0 7-5 7-8s-3-7-5-7l-2-1c0-3-1-2-3 0M58 77h43v40H17V97l-1-19v40h86V97h24l24 1h3l3-1v10l1 11h86V97h24a108 108 0 0 1 27 1l3-1v10l1 11h86V76h-87v10c0 11 0 11-6 8l-1 1c1 1-5 1-23 1h-24V76h-87v10c0 11 0 11-6 8l-1 1c1 1-5 1-23 1h-24V76H16l42 1m99 20l1 20h84V77h-85v20m141 0l1 20h84V77h-85v20m23-5l-1 3c0 3 0 3 5 3h12l2-1v-2l1 2 3 1h15l1-2 1 1c1 1 1 1 1-1 0-3 0-3-4-3h-12c-2 0-3 0-3 2l-1 3v-3c0-2-3-3-6-2-5 1-9 0-11-1h-3M44 93h-2c-2 0-2 0-2 3 0 2 0 2 1 1l1-1c0 2 19 3 26 2h8l1-1 1-1 1 2 1-2c0-2-1-2-5-2l-4-1-2-1-2 1h-2l-2 1-1 3-1-2c1-1 0-2-2-2h-9l-3-1-3 1m143 2c0 3 2 5 4 3h1c0 2 1 2 3 1 1-1 2-2 5-1h12c2-1 1-4-2-4l-2-1h-4c-1 0-2 0-2 2-1 1-1 1-1-1 0-1 0-2-1-1h-8l-1-1-1 3c0 3-1 2-2-1-1-2-1-1-1 1M30 134c0 2 0 2-1 1l-4-1c-5 0-6 1-5 3 0 2 3 3 3 1l1-1c1 1 2 0 3-1h1c0 2 5 2 5 0h1l8 1c6 1 7 0 6-1-2-1-2-2 0-1l1-1v-1h1l-3-1-3 1h-1c-1 0-2 0-2 2h-1c-1-1-2-2-5-1l-4-1c-1-1-1-1-1 1m166-1l-18 1c-16 0-16 0-16 2s7 2 8 0h2c1-1 1-1 1 1 1 2 1 2 3 1h3l3-2h2c0 1 4 2 5 1h1l1-1h1c0 2 3 1 3-1l1 1c1 2 2 2 2 1h2l1 1c0-1 8-2 10-1h21l1-1h4l1 1h5l1 1h8l1-3c0-4-1-4-2-1l-1 1c0-1-1-2-8-1l-7-1v-1l-2 1-1 1h-4c-1 1-2 0-3-1h-14c-1-2-7-1-7 0h-8m139 1h-17c-15 0-15 0-15 2s7 2 8 0h2c1-1 1-1 1 1 1 2 1 2 3 1h3l3-1 2-1c1 2 7 2 7 0h1c0 2 3 1 3-1l2 1 1 1c0-2 0-2 2-1 1 2 1 2 1 0h1l9 1 1-1h6c1 2 11 2 12 0h2c1 2 5 2 5 0l-1-3-2 1h-1c-1-1-5 0-5 1h-1l-8-2h-7c0-2-2 0-2 2s0 2-1 0-5-4-5-2l-1 1v-1l-1-1-1 1h-4c0-2-2-1-3 1m-304 7l-7 1c-4 0-5 1-4 4 0 2 2 3 3 1 0-1 1-2 2-1l2-1h12l7 1 7-1 2-1 1 1c0 2 2 1 2-1h1c0 2 1 2 2 2h8c3 1 3 1 3-2s0-3-2-2c0 2-1 2-1 1l-6-1-8-1h-5c-1 0-2 0-3 2l-1 1c0-2-5-3-5-1h-1c0-2-1-2-3-1h-3l-3-1m152 1h-2c0-2-5-1-6 1l-1 1-3-2h-4c-3-1-6 0-6 2 0 3 5 3 5 0h1c1 2 13 2 14 1h1c0 2 10 1 10-1l1 1 1 2v-2c0-2 0-2 1 0s1 2 3 1h5c2 0 3 0 3-2h1c1 2 5 3 6 1h2l4 1h4l2 1 16-1 1 1 1-3-1-3-1 1h-9c-2-1-6 0-6 2l-1 1v-3l-2-1-2 2c-1 2-1 2-1 0s-4-3-4-1h-14c-11 0-15 1-16 2h-3l2-2v-1l-2 1M57 158h-2c-2 0-2 0-2 3 0 1 0 2 1 1 0-2 0-2 2 0h1c0-2 0-2 1-1 1 2 1 2 2 0h1c0 2 6 2 6 1h1c1 1 13 1 13-1l1 1 1 1h2c2 1 2 1 2-2s0-3-1-2h-1c0-1-7 0-7 2h-1l-3-2c-2 1-3 0-3-1h-1l-2 1c-1-2-2-2-4-1h-7m144 0c0 2 0 2-1 1h-3l-1-1-2 1h-6c-5 0-6 1-8 2-1 2-1 2 1 2l2-2h1c1 2 7 2 7 0h1c1 2 4 3 3 0h1c1 2 2 2 2 1h4l6 1h4c0 2 2 1 4-1l2-1c-1 2 0 2 5 2l6-1h1c1 1 1 0 1-1v-3l-1 1h-11c-8-1-9 0-9 1-1 2-1 2-1 0s0-2-3-2h-5M53 177c0 2 3 3 5 2h17c1 1 5 0 5-1h1l3 1c2 1 2 0 2-2s0-2-1 0c-1 1-1 1-1-1 0-1 0-2-1-1h-2l-3 1-2 1-2-2H59l-3-1c-2 0-3 1-3 3m141-2l-16 1-16 1c0 3 7 3 8 1h2c1-1 1-1 1 1 1 2 1 2 3 1l3-1c1 1 2 0 3-1h2c0 1 4 2 5 1h1l1-1h1l7 1h9l2 1h20c1 1 1 0 1-2l-1-3h-5l-5 1h-1c0-2-3-1-5 1h-1v-2h-2c-1-1-1 0-1 1 0 3-2 3-2 0 0-2-1-3-4-1h-2l-4-1-4 1m-172 2v1l-1-1h-1v1c1 2 7 2 8 0h1l2 1 2 1h2l2-1c1 1 5 0 5-1h1c1 2 7 2 7-1l1 1c1 1 1 1 1-1 0-1-1-2-7-2s-7 1-6 2h-1c-1-1-3-2-9-2-7 0-8 1-7 2\\' fill=\\'%23d3d3d3\\' fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n    ></span>\n    <img\n        class=\"gatsby-resp-image-image\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;\"\n        alt=\"lifecycle\"\n        title=\"\"\n        src=\"/static/0307d8376722cf5b0a368df80cf726de/35c67/component-lifecycle.png\"\n        srcset=\"/static/0307d8376722cf5b0a368df80cf726de/7b5b4/component-lifecycle.png 188w,\n/static/0307d8376722cf5b0a368df80cf726de/d266f/component-lifecycle.png 375w,\n/static/0307d8376722cf5b0a368df80cf726de/35c67/component-lifecycle.png 750w,\n/static/0307d8376722cf5b0a368df80cf726de/6b691/component-lifecycle.png 975w\"\n        sizes=\"(max-width: 750px) 100vw, 750px\"\n      />\n  </span>\n  </a></p>\n<h2>useEffect</h2>\n<p>React tarjoaa <code class=\"language-text\">useEffect</code>-hookin, jonka avulla voimme suorittaa haluamaamme koodia komponentin eri elinkaaren vaiheissa. <code class=\"language-text\">useEffect</code> ottaa ensimmäiseksi parametrikseen funktion ja toiseksi listan, joka sisältää ne muuttujat joiden muutoksia haluamme pitää silmällä.<br>\n<br>\nFunktio importoidaan projektiin vastaavasti kuin useState. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span>  <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Component mounted!\"</span><span class=\"token punctuation\">)</span>   \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Koska esimerkissämme hookin toinen parametri on tyhjä lista, niin funktiomme suoritetaan vain komponenttimme elinkaaren alussa kerran.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value changed!\"</span><span class=\"token punctuation\">)</span>   \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> value <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nyt funktiomme suoritetaan joka kerta kun kuvitteellinen muuttuja <code class=\"language-text\">value</code>, joka voisi olla esimerkiksi prop tai tilamuuttuja, muuttuu.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Component rendered!\"</span><span class=\"token punctuation\">)</span>   \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Voimme myös jättää toisen parametrin pois. Tällöin funktiomme kutsutaan joka kerta, kun komponentti renderöidään, eli kun jokin asia sen tilassa (props tai state) muuttuu.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Component mounted!\"</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Component dismounted!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Tarvittaessa pääsemme myös komponentin elinkaaren viimeiseen vaiheeseen, eli kun komponentti dismountataan. Tämä onnistuu palauttamalla <code class=\"language-text\">useEffect</code>-hookista funktion, joka suoritetaan dismounttauksen yhteydessä. Nyt esimerkkimme tulostaa komponentin elinkaaren alussa <strong>Component mounted!</strong> ja lopussa <strong>Component dismounted!</strong>.</p>\n<p><strong>Tehtävä:</strong> Lisää effekti, joka suoritetaan silloin, kun <code class=\"language-text\">App</code> renderöidään ensimmäisen kerran</p>\n<p><a href=\"/react-workshop-2/API/\">Nyt olemme valmiita vastaanottamaan dataa sovelluksemme ulkopuolelta.</a></p>","frontmatter":{"title":"Elinkaari"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/elinkaari/"}}